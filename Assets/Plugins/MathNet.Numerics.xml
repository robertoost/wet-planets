<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.Distributions.CumulativeNormalDistribution">
            <summary>Cumulative normal distribution.</summary>
            <remarks>
            <p>Returns the value (Maple)
            <c>int(1 / (sigma * sqrt(2 * Pi)) * exp(-(x - mu)^2/ (2 * sigma ^ 2)), x = -infinity..t)</c>
            for the specified <c>t</c>, <c>mu</c> and <c>sigma</c>.</p>
            <p>The <i>CND</i> is related to the <i>erf</i> with the formula
            <i>CND(x)=(erf(x/sqrt(2))+1)/2</i>.</p>
            <p>For more details about the cumulative normal distribution, look at
            the <a href="http://en.wikipedia.org/wiki/Erf">WikiPedia</a>.</p>
            <p>See <a href="http://www.library.cornell.edu/nr/">Numerical recipees in C</a> 
            (chapter 6) for the detail of the algorithm.</p>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.IRealFunction">
            <summary>
            The interface <c>IRealFunction</c> defines an interface
            of real valued function with one real argument.
            </summary>
            <remarks>
            This interface will typically be implemented for
            distributions. See <see cref="N:MathNet.Numerics.Distributions"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.IRealFunction.ValueOf(System.Double)">
            <summary>Gets the function value associated the provided
            <c>input</c> value.</summary>
            <remarks>The semantic associated to this interface is
            <i>deterministic function</i> (the same input should
            lead to the same returned value).</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CumulativeNormalDistribution.#ctor">
            <summary>
            Distribution corresponding to the standard normal distribution
            (mean equal to <c>0.0</c> and sigma equal to <c>1.0</c>).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CumulativeNormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Distribution corresponding to the standard normal distribution
            of given <c>mean</c> and <c>sigma</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CumulativeNormalDistribution.ValueOf(System.Double)">
            <summary>
            Gets the cumulative normal distribution function.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution">
            <summary>
            Inverse cumulative normal distribution class.
            </summary>
            <remarks>
            <p>This function returns an approximation of the inverse cumulative
            normal distribution function. I.e., given P, it returns
            an approximation to the X satisfying P = Pr(Z &lt;= X) where Z is a
            random variable from the standard normal distribution.</p>
            
            <p>The algorithm uses a minimax approximation by rational functions
            and the result has a relative error whose absolute value is less
            than 1.15e-9.</p>
            
            <p>See the page <see href="http://home.online.no/~pjacklam/notes/invnorm/"/>
            for more details.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.#ctor">
            <summary>Inverse cumulative standard normal distribution.</summary>
            <remarks>The <b>standard</b> normal distribution has a
            mean equal to zero and a standart deviation equal to one.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.#ctor(System.Double,System.Double)">
            <summary>Inverse cumulative normal distribution.</summary>
            <remarks>The normal distribution has a mean equal to <c>mean</c> 
            and a standart deviation equal to <c>sigma</c>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.ValueOf(System.Double)">
            <summary>
            Gets the inverse cumulative normal distribution function.
            </summary>
            <param name="p">A <c>double</c> in <c>[0,1]</c> expected.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.StandardValueOf(System.Double)">
            <summary>Returns the inverse cumulative <b>standard</b> normal 
            distribution for the probability <c>p</c>.</summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.Mean">
            <summary>Gets or sets the mean of the normal distribution.</summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InvCumulativeNormalDistribution.Sigma">
            <summary>
            Gets or sets the standard deviation of the normal distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NamespaceDoc">
            <summary>
            <p><c>MathNet.Numerics.Distributions</c> provides the common
            statitiscal distributions.</p>
            
            <p>Note that all the distributions implement <c>IRealFunction</c>.</p>
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Equations.NamespaceDoc">
            <summary>
            <p><c>MathNet.Numerics.Equations</c> provides a toolbox to approximate
            and solve linear and non-linear systems of equations.</p>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Equations.ScalarIterator.FindFixpoint(System.Double,System.Double,System.Double)">
            <summary>Finds a solution of the equation f(x)=x near a given estimation.</summary>
            <param name="estimation">Start value.</param>
            <param name="relativeTolerance">Normalized tolerance, usually between 10^(-3) and 10^(-9).</param>
            <param name="absoluteTolerance">Absolute tolerance, usually a few times of <see cref="F:System.Double.Epsilon"/>.</param>
            <returns>z, one of the roots of f-x so that f(z)-z=0, or f(z)=z</returns>
        </member>
        <member name="M:MathNet.Numerics.Equations.ScalarIterator.FindRoot(System.Double,System.Double,System.Double,System.Double)">
            <summary>Finds a solution of the equation f(x)=0 near a given estimation.</summary>
            <param name="firstEstimation">First start value.</param>
            <param name="secondEstimation">Second start value.</param>
            <param name="relativeTolerance">Normalized tolerance, usually between 10^(-3) and 10^(-9).</param>
            <param name="absoluteTolerance">Absolute tolerance, usually a few times of <see cref="F:System.Double.Epsilon"/>.</param>
            <returns>z, one of the roots of f so that f(z)=0</returns>
            <remarks>This method uses the Quasi-Newton-Raphson method in the secant-modification if no derivative is provided (that's why two start values are required), or the classic Newton-Raphson method if a derivative is provided (although usually not recommended).</remarks>
        </member>
        <member name="T:MathNet.Numerics.Generators.BinomialGenerator">
            <summary>
            BinomialGenerator is a binomial deviate random number using the System.Math.Random as a seed generator.
            </summary>
            <remarks><i>Taken from Numerical Recipes in C</i>, William H. Press, et al; <b>Chap 7.3 pg 295 equation 7.3.7</b></remarks>
        </member>
        <member name="T:MathNet.Numerics.IRealGenerator">
            <summary>
            The <c>IRealGenerator</c> interface defines a generator
            of real (here <c>double</c>) values.
            </summary>
            <remarks>
            The implementations of this class will typically
            be random generators. See <see cref="N:MathNet.Numerics.Generators"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.IRealGenerator.Next">
            <summary>Returns the next value of the generator.</summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.BinomialGenerator.#ctor(System.Double,System.Int32)">
            <summary>
            Default constructor that accepts a given probability and number of trials that is used for the entire 
            instance life.  For non-instance binomial deviates <see cref="M:MathNet.Numerics.Generators.BinomialGenerator.Next(System.Double,System.Int32)"/>
            </summary>
            <param name="probability"></param>
            <param name="numberTrials"></param>
        </member>
        <member name="M:MathNet.Numerics.Generators.BinomialGenerator.Next">
            <summary>
            Returns the next binomial value based on the instantiated BinomialGenerator
            <seealso cref="M:MathNet.Numerics.Generators.BinomialGenerator.Next(System.Double,System.Int32)"/>
            </summary>
            <returns>A number from an integer value that is a random deviate drawn from a binomial
            distribution of x trials each of probability xx</returns>
        </member>
        <member name="M:MathNet.Numerics.Generators.BinomialGenerator.Next(System.Double,System.Int32)">
            <summary>
            Returns a number from an integer value that is a random deviate drawn from a binomial distribution of
            numTrials each of probability "probability", using the System.Random as a source of uniform random deviates.
            </summary>
            <param name="probability">The probability of each trial</param>
            <param name="numTrials">the number of trials to perform</param>
            <returns>A binomial deviated floating point number</returns>
        </member>
        <member name="T:MathNet.Numerics.Generators.CombinationGenerator">
            <summary>
            The class <c>CombinationGenerator</c> used to generates combination.
            </summary>
            <remarks>
            <p>See the <a href="http://en.wikipedia.org/wiki/Combination">WikiPedia</a>
            for more information about the combinatorics properties of combinations.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.CombinationGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Gets an array of <c>k</c> indices picked uniformly drawn from the
            interval <c>[0, n-1]</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.CombinationGenerator.Next(System.Double[],System.Int32)">
            <summary>
            Gets an array of <c>k</c> indices picked from the interval <c>[0, weights.Length-1]</c> 
            with probabilities proportionnal to the <c>weights</c>.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.DiscreteGenerator">
            <summary>
            Non-uniform discrete random generator.
            </summary>
            <remarks>
            <p>The class <c>DiscreteGenerator</c> provides integers 
            deviates for any arbitrary (finite) distribution.</p>
            
            <code>
            double[] distribution = {0.25, 0.25, 0.5};
            DiscreteGenerator gen = new DiscreteGenerator(distribution);
            
            // Pr(x = 0) = 0.25, Pr(x = 1) = 0.25, Pr(x = 2) = 0.5
            int x = gen.Next();
            
            // Changing the distribution
            gen[2] = 0.0;
            
            // Pr(y = 0) = 0.5, Pr(y = 1) = 0.5, Pr(x = 2) = 0.0
            int y = gen.Next();
            </code>
            
            <p>The probability <c>Pr(x)</c> for any integer <c>x</c>
            is proportional to <c>DiscreteGenerator[x]</c>.</p>
            
            <p>See the <a href="http://cgm.cs.mcgill.ca/~luc/chapter_three.pdf">
            chapter three</a> of the book <i>Non-uniform variate Generation</i>
            from Luc Devroye.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.DiscreteGenerator.#ctor(System.Int32,System.Double)">
            <summary>Uniform distribution for the integers <c>[0, count)</c>.</summary>
            <param name="count">Integer deviate set size.</param>
            <param name="uniformWeight">Weight assigned to each integer deviate.</param>
            <remarks>All weights are initialized to <c>1.0</c>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.DiscreteGenerator.#ctor(System.Double[])">
            <summary>Non-uniform distribution for the integers 
            <c>[0, distribution.Length)</c>.</summary>
            <param name="weights">Weights associated to each
            integer deviate.</param>
        </member>
        <member name="M:MathNet.Numerics.Generators.DiscreteGenerator.Next">
            <summary>Gets the next integer deviate.</summary>
            <returns>An integer within <c>[0, Count)</c>.</returns>
            <remarks>The complexity of a call to this method is <c>O(1)</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Generators.DiscreteGenerator.Item(System.Int32)">
            <summary>Gets or sets the weights for any integer deviate.</summary>
            <remarks>
            The complexity of setting an element is <c>O(log(this.Count))</c>.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Generators.DiscreteGenerator.Count">
            <summary>Gets the number of elements in the distribution.</summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.ExponentialGenerator">
            <summary>
            Pseudo-random generator of exponentially distributed deviates.
            </summary>
            <remarks>
            <p>See the <a href="http://en.wikipedia.org/wiki/Exponential_distribution">
            WikiPedia</a> for detail about the exponential distribution.</p>
            <p>See <a href="http://www.library.cornell.edu/nr/">Numerical recipees in C</a> 
            (chapter 7) for the detail of the algorithm.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.ExponentialGenerator.#ctor">
            <summary>Pseudo-random exponential generator.</summary>
            <remark>The half period of the exponential distribution
            is set to <c>1</c> by default.</remark>
        </member>
        <member name="M:MathNet.Numerics.Generators.ExponentialGenerator.#ctor(System.Double)">
            <summary>Pseudo-random exponential generator.</summary>
            <param name="halfPeriod">Mean of the exponential distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Generators.ExponentialGenerator.Next">
            <summary>Returns an exponentially distributed positive random deviate.</summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.ExponentialGenerator.HalfPeriod">
            <summary>Half period of the exponential distribution.</summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.GammaGenerator">
            <summary>
            Pseudo-random generator of gamma distributed deviates.
            </summary>
            <remarks>
            <p>The returned deviate of <see cref="M:MathNet.Numerics.Generators.GammaGenerator.Next"/> could be interpreted as the
            waiting time for the <see cref="P:MathNet.Numerics.Generators.GammaGenerator.Order"/>th event in a Poisson process of unit mean
            (see the <a href="http://en.wikipedia.org/wiki/Poisson_distribution">WikiPedia</a> 
            for details about Poisson distribution).</p>
            <p>See <a href="http://www.library.cornell.edu/nr/">Numerical recipees in C</a> 
            (chapter 7) for the detail of the algorithm.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.GammaGenerator.#ctor(System.Int32)">
            <summary>
            Gamma pseudo-random generator of order equal to <c>order</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.GammaGenerator.Next">
            <summary>
            Returns the next pseudo random Gamma distributed deviate.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.GammaGenerator.Order">
            <summary>Gets or sets the order of the gamma distribution.</summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.NamespaceDoc">
            <summary>
            <p><c>MathNet.Numerics.Generators</c> provides the most common
            non-uniform real random generators.</p>
            
            <p>Note that all the random generators implements <c>IRealGenerator</c>.
            The idea to be able to access any generator in an uniform fashion. This
            allows the implementation of "generic" algorithms that do not specify
            explicitely the generators in use.</p> 
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.NormalGenerator">
            <summary>
            Pseudo-random generator of normally distributed deviates.
            </summary>
            <remarks>
            <p>This implementation is based on the <i>Box-Muller</i> algorithm
            for generating random deviates with a normal distribution.</p>
            
            <p>See the <a href="http://en.wikipedia.org/wiki/Normal_distribution">
            WikiPedia</a> for detail about the normal distribution.</p>
            <p>See <a href="http://www.library.cornell.edu/nr/">Numerical recipees in C</a> 
            (chapter 7) for the detail of the algorithm.</p>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Generators.NormalGenerator.extraNormal">
            <summary>Extra normal deviate generated by a call to 
            <c>NormalGenenator.Next()</c>.</summary>
            <seealso cref="M:MathNet.Numerics.Generators.NormalGenerator.Next"/>
        </member>
        <member name="M:MathNet.Numerics.Generators.NormalGenerator.#ctor">
            <summary>Standard normal generator.</summary>
            <remarks>The normal distribution has a zero mean and
            standart deviation equal to one.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.NormalGenerator.#ctor(System.Double,System.Double)">
            <summary>Normal generator.</summary>
            <param name="mean">Mean.</param>
            <param name="sigma">Standard deviation.</param>
        </member>
        <member name="M:MathNet.Numerics.Generators.NormalGenerator.Next">
            <summary>Returns the next pseudo random normally distributed deviate.</summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.NormalGenerator.Mean">
            <summary>Gets or sets the mean of the normal distribution.</summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.NormalGenerator.Sigma">
            <summary>Gets or sets the standard deviation of
            the normal distribution.</summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.PermutationGenerator">
            <summary>Pseudo-random generator of permutations.</summary>
            <remarks>
            <p>A permutation is defined as an array <c>int[]</c> of
            length <c>N</c> that contains all the integers (in any order)
            of the interval <c>[0,N)</c>. The method <see cref="M:MathNet.Numerics.Generators.PermutationGenerator.Next(System.Int32)"/> is
            used to generated random permutation.</p>
            
            <p>See the <a href="http://en.wikipedia.org/wiki/Permutation">WikiPedia</a>
            for more details about permutations.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.PermutationGenerator.Next(System.Int32)">
            <summary>Gets the next random permutation.</summary>
            <remarks>A permutation is an array of length <c>N</c> that contains
            (in any order) the integers of the interval <c>[0, N)</c>..</remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.PermutationGenerator.Shuffle(System.Array)">
            <summary>Randomly shuffle <c>array</c>.</summary>
            <remarks>Shuffling an array is equivalent to generating a
            random permutation and applying this permutation to the array.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.PermutationGenerator.Subset(System.Collections.ICollection,System.Int32)">
            <summary>Random subset of the provided collection.</summary>
            <param name="c">Collection from which the subset is drawn.</param>
            <param name="subsetCount">Expected size of the subset (may be zero).</param>
            <returns>A collection of size <c>subsectCount</c></returns>
            <remarks>No item of <c>c</c> could be drawn more than once.
            The order of the items in <c>c</c> is kept. The complexity
            of operation is <c>O(n)</c> where <c>n</c> is the number
            of elements in the collection <c>c</c>.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Generators.PermutationGenerator.IndexedValue">
            <summary>Helper.</summary>
        </member>
        <member name="T:MathNet.Numerics.Generators.PoissonGenerator">
            <summary>
            Pseudo random generator of Poisson distributed deviates.
            </summary>
            <remarks>
            <p>See the <a href="http://en.wikipedia.org/wiki/Poisson_distribution">
            WikiPedia</a> for details about the Poisson distribution.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.PoissonGenerator.#ctor">
            <summary>
            Standard Poisson generator (lambda equal to <c>1.0</c>).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.PoissonGenerator.#ctor(System.Double)">
            <summary>
            Poisson generator with the provided <c>lambda</c>.
            </summary>
            <param name="lambda">Positive <c>double</c> value.</param>
        </member>
        <member name="M:MathNet.Numerics.Generators.PoissonGenerator.Next">
            <summary>Returns the next pseudo random Poisson distributed deviate.</summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.PoissonGenerator.Lambda">
            <summary>
            Gets or sets the lambda parameter of the Poisson distribution.
            </summary>
            <remarks>The lambda parameter is interpreted as the number 
            of occurences per unit of time. The value of the property
            is always positive.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Generators.ZipfGenerator">
            <summary>
            Pseudo-random generator of Zipf distributed deviates.
            </summary>
            <remarks>
            <p>The density of the continuous zipf distribution is defined
            on <c>[1, +infinty)</c>, the density is proportional to
            <c>x^s</c> where <c>s &gt; 1</c> is the <i>skew</i>.</p>
            
            <p>See the <a href="http://en.wikipedia.org/wiki/Zipfs_law">Wikipedia</a>
            for more information about Zipf distribution.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Generators.ZipfGenerator.#ctor">
            <summary>Zipfian generator with a default 
            <c>skew</c> equal to <c>2</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.ZipfGenerator.#ctor(System.Double)">
            <summary>Zipfian generator with the provided <c>skew</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Generators.ZipfGenerator.Next">
            <summary>Returns the next zipfian deviate.</summary>
        </member>
        <member name="P:MathNet.Numerics.Generators.ZipfGenerator.Skew">
            <summary>Gets or sets the skew of the zipfian distribution.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueIteration">
            <summary> Partial implementation of EigenvalueIteration</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.AbstractIteration">
            <summary> Partial implementation of Iteration</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Iteration">
            <summary> Tracks convergence of an iterative linear solver.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Iteration.Reset">
            <summary> Resets the iteration</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Iteration.MoveNext">
            <summary> Increases iteration counter</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Iteration.IsFirst">
            <summary> Returns true for the first iteration</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Iteration.IterationCount">
            <summary>Number of iteration performed.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.AbstractIteration.iter">
            <summary> Iteration number</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration">
            <summary> Iteration for an eigenvalue problem</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <param name="eig">Eigenvalues</param>
            <param name="x">Eigenvectors</param>
            <returns> True if converged</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <param name="lambda">Eigenvalues</param>
            <returns> True if converged</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <returns> True if converged</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <param name="eig">Eigenvalues</param>
            <param name="x">Eigenvectors</param>
            <returns> True if converged</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(System.Double[],System.Double[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <param name="eig">Eigenvalues</param>
            <returns> True if converged</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.Converged(System.Double[])">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vectors</param>
            <returns> True if converged</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.IterationMonitor">
            <summary>Gets or sets current iteration monitor</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIteration.NormType">
            <summary> Gets or sets the vector-norm in use</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueIteration.blas">
            <summary> Local reference</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueIteration.monitor">
            <summary> Iteration monitor</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueIteration.norm_type">
            <summary> Vector-norm</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueIteration.#ctor">
            <summary> Constructor for AbstractEigenvalueIteration.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver">
            <summary> Partial implementation of EigenvalueSolver.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueSolver">
            <summary> Solver for eigenvalue problems</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueSolver.Solve(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Computes eigenvectors and eigenvalues of the matrix. Note that both
            <code>eig</code> and <code>x</code> are used as initial guesses, so to
            improve convergence, it may be useful to supply good guesses of the
            eigenvalues.</summary>
            <param name="A">Matrix</param>
            <param name="eig">Overwritten with the eigenvalues</param>
            <param name="x">Overwritten with eigenvectors</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueSolver.Iteration">
            <summary> Gets or sets current iteration object</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueSolver.Transformation">
            <summary> Gets or sets the eigenvalue transformation</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.iter">
            <summary> Iteration object</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.et">
            <summary> Spectrum transformation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.#ctor">
            <summary> Constructor for AbstractEigenvalueSolver.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.Eigenvalues(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Uses the Rayleigh Quotient to compute real eigenvalues for the given
            eigenvectors.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.Normalize(MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Runs normalize on each array-component</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.Normalize(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Normalizes the given vector using the 2-norm. If it is a zero-vector,
            its entries will be populated from a uniform distribution, then
            normalized.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.Normalize0(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Normalizes the given vector using the 2-norm. If it is a zero-vector,
            nothing is done.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.Random(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Each entry of q is populated from a uniform distribution. The vector will
            have a 2-norm of 1.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueSolver.IsZero(System.Double)">
            <summary> Returns true if x is approximativly zero, else false</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueTransformation">
            <summary> Partial implementation of EigenvalueTransformation</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueTransformation">
            <summary> Transforms the spectrum of the eigenvalue problem.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueTransformation.Apply(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Applies the transformation to x, store in y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueTransformation.Eigenvalue(System.Double)">
            <summary> Unapplies the transformation to get the eigenvalue.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueTransformation.Eigenvalue(System.Double[])">
            <summary> Unapplies the transformation to get the eigenvalues.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.AbstractEigenvalueTransformation.#ctor">
            <summary> Constructor for AbstractEigenvalueTransformation</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ArrayEigenvalueIterationMonitor">
            <summary> Registers iteration information into an array</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIterationMonitor">
            <summary> Monitors an eigenvalue solver</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIterationMonitor.Monitor(System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Int32)">
            <summary> Monitors/registers current information</summary>
            <param name="r">Current residual norms</param>
            <param name="eig">Current eigenvalue estimates</param>
            <param name="x">Current eigenvector estimates</param>
            <param name="i">Current iteration number</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIterationMonitor.Monitor(System.Double[],System.Double[],System.Int32)">
            <summary> Monitors/registers current information</summary>
            <param name="r">Current residual norms</param>
            <param name="eig">Current eigenvalue estimates</param>
            <param name="i">Current iteration number</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueIterationMonitor.Monitor(System.Double[],System.Int32)">
            <summary> Monitors/registers current information</summary>
            <param name="r">Current residual norms</param>
            <param name="i">Current iteration number</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ArrayEigenvalueIterationMonitor.array">
            <summary> Contains all the residuals</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ArrayEigenvalueIterationMonitor.#ctor">
            <summary> Constructor for ArrayEigenvalueIterationMonitor.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ArrayEigenvalueIterationMonitor.Array">
            <summary> 
            Retrives all the residuals in an array. Array index is the iteration number.
            </summary>
            <returns> Double array of residuals.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.DefaultEigenvalueIteration">
            <summary> Default eigenvalue iteration object</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.DefaultEigenvalueIteration.#ctor">
            <summary> Constructor for DefaultEigenvalueIteration. Default is 100000 iterations
            at most, convergence tolerance of 1e-3 and divergence tolerance of 1e+5.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.DefaultEigenvalueIteration.setParameters(System.Double,System.Double,System.Int32)">
            <param name="ctol">New convergence tolerance.</param>
            <param name="dtol">New divergence tolerance.</param>
            <param name="maxIter">Maximum number of iterations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver">
            <summary> Lanczos method. Note that the current implementation is not very advanced</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.#ctor(System.Boolean)">
            <summary> Constructor for Lanczos</summary>
            <param name="fullOrthogonalization">True for full orthogonalization, false for partial.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.#ctor">
            <summary> Constructor for Lanczos, using partial orthogonalization</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.Prod(MathNet.Numerics.LinearAlgebra.Sparse.IDenseAccessVector[],System.Double[0:,0:],MathNet.Numerics.LinearAlgebra.Sparse.IDenseAccessVector[])">
            <returns> r = q*v, for constructing eigenvectors.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.Lanczos(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32)">
            <summary> Computes a Lanczos decomposition</summary>
            <param name="A">Matrix</param>
            <param name="q">q[offset] is the initial vector. The rest are overwritten.</param>
            <param name="alpha">Diagonal of the factorization.</param>
            <param name="beta">Sub/super diagonals of the factorization.</param>
            <param name="z">Work vector.</param>
            <param name="offset">For continued factorization.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.GramSchmidt(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Int32)">
            <summary> Applies the Gram-Schmidt procedure to orthogonalize z against the
            set of vectors q. Stops at index ql, exclusive.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.LanczosOrthogonalization(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[],System.Double[],System.Int32)">
            <summary> The usual Lanczos orthogonalization</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.EstimateResidual(System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition,System.Double[],System.Int32[])">
            <summary> Eigenvalue residual estimation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.Sort(System.Double[],System.Double[],System.Int32[])">
            <summary> Sorts a, buts the smallest values into outD and the indices into outI</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.Expand(MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector[],System.Double[],System.Double[])">
            <summary> Copies q, alpha and beta over to qn, alphan and betan.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.IntDoublePair">
            <summary> Pair of an int and a double, comparisons by the double value</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver.IntDoubleVectorPair">
            <summary> Pairing of an int, a double and a vector, comparisons by the double value</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftEigenvalueTransformation">
            <summary> Like ShiftEigenvalueTransformation, but the shift is locked</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftEigenvalueTransformation">
            <summary> Shifts the operator</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftEigenvalueTransformation.#ctor(System.Double)">
            <summary> Constructor for LockedShiftEigenvalueTransformation. 
            Sets the locked shift.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftInvertEigenvalueTransformation">
            <summary> Like ShiftInvertEigenvalueTransformation, but locks the shift</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftInvertEigenvalueTransformation">
            <summary> Shifts and inverts the operator</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftInvertEigenvalueTransformation.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Constructor for ShiftInvertEigenvalueTransformation. The matrix Am
            must be of the same size as A, and it is overwritten.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftInvertEigenvalueTransformation.Solver">
            <summary> Sets the linear solver to use. Default is GMRES.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftInvertEigenvalueTransformation.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Double)">
            <summary> Constructor for LockedShiftInvertEigenvalueTransformation. The matrix Am
            must be of the same size as A, and it is overwritten. The given shift
            is fixed.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.NamespaceDoc">
            <summary>
            Iterative eigenvalue solvers. Solves
            <code>A x = eig x</code>
            <p>for both the eigenvector <c>x</c> and the eigenvalue <c>eig</c>. 
            However, since MathNet works only on double-precision numbers, only real 
            eigenvalues will be revealed.</p>
            
            <h3>Iterative eigenvalue solvers</h3>
            <p>The following example illustrates the basic usage:</p>
            <code>
            double[] EigenvalueSolver(Matrix A, int n) 
            {
            	EigenvalueSolver solver = new PowerIteration();
            	Vector[] x = new Vector[n];
            	double[] eig = new double[n];
            	
            	for (int i = 0; i &lt; n; ++i)
            		x[i] = new DenseVector(A.RowCount);
            	
            	try 
            	{
            		solver.Solve(A, eig, x);
            	} 
            	catch (NotConvergedException e) 
            	{
            		Console.WriteLine("Eigenvalue solver did not converge");
            		Console.WriteLine("Number of iterations = " + e.Iterations);
            		Console.WriteLine("Reason = ");
            		if (e.Reason == NotConvergedException.BREAKDOWN)
            			Console.WriteLine("breakdown");
            		else if (e.Reason == NotConvergedException.DIVERGENCE)
            			Console.WriteLine("divergence");
            		else if (e.Reason == NotConvergedException.ITERATIONS)
            			Console.WriteLine("too many iterations");
            	}
            	return eig;
            }
            </code>
            
            <p>Note that the arrays holding the eigenvectors and the eigenvalues 
            must be allocated. There are two solvers</p>
            <ul>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.PowerIterationSolver"/></li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LanczosSolver"/></li>
            </ul>
            <p>Like the linear solvers, an iteration object can be attached. 
            The main difference is that there are multiple states to monitor,
            that is, many eigenvalue/eigenvector pairs. Consequently, the
            iteration monitors are slightly different.</p>
            
            <h3>Eigenvalue transformations</h3>
            <p>MathNet uses eigenvalue transformations to generate methods 
            such as the inverse iteration or Rayleigh quotient iteration. Use 
            <sse cref="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.IEigenvalueSolver.Transformation"/> to set a new 
            transformation. Transformations present include</p>
            <ul>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.NormalEigenvalueTransformation"/> - the default. 
            	No spectral transformation performed.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftEigenvalueTransformation"/> - shifts the 
            	spectrum continuously, using the latest eigenvalue estimate.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftEigenvalueTransformation"/> - uses a 
            	fixed shift.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftInvertEigenvalueTransformation"/> - shifts 
            	the spectrum continuously, and applies the inverse matrix operator.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftInvertEigenvalueTransformation"/> - uses a 
            	fixed shift, and thus the same inverted matrix.</li>
            </ul>
            <p>As an example, using <c>LockedShiftInvertEigenvalueTransformation</c> 
            with <c>PowerIteration</c> gives the inverse iteration, while using 
            <c>ShiftInvertEigenvalueTransformation</c> gives the Rayleigh quotient 
            iteration. Also, note that <c>ShiftInvertEigenvalueTransformation</c>
            does not work properly with <c>LanczosSolver</c></p>.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.NormalEigenvalueTransformation">
            <summary> Performs <code>y=Ax</code> without shifting</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.NullEigenvalueIterationMonitor">
            <summary> Bit-bucket eigenvalue monitor</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.OutputEigenvalueIterationMonitor">
            <summary> Outputs residual information to a stream</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.OutputEigenvalueIterationMonitor.#ctor">
            <summary> Constructor for OutputEigenvalueIterationMonitor. 
            Uses System.err as default output.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.OutputEigenvalueIterationMonitor.OutputStream">
            <summary> Sets the output stream to use</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.PowerIterationSolver">
            <summary> Generic power iteration eigenvalue solver. 
            Using <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.NormalEigenvalueTransformation"/> gives the Power method,
            <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.LockedShiftInvertEigenvalueTransformation"/> will produce 
            the Inverse iteration, while <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Eigenvalue.ShiftInvertEigenvalueTransformation"/> 
            gives the Rayleigh quotient iteration.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearIteration">
            <summary> Partial implementation of a linear iteration object.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration">
            <summary> Iteration for a linear system</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Converged(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vector</param>
            <param name="x">State-vector</param>
            <returns> True if converged </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Converged(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-norm </param>
            <param name="x">State-vector</param>
            <returns> True if converged </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Converged(System.Double)">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-norm</param>
            <returns> True if converged </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Converged(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks for convergence</summary>
            <param name="r">Residual-vector</param>
            <returns> True if converged </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Monitor">
            <summary> Gets or sets current iteration monitor</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.NormType">
            <summary>Gets or sets the vector-norm in use</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearIteration.blas">
            <summary> Local reference</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearIteration.normType_">
            <summary> Vector-norm</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearIteration.monitor_">
            <summary> Iteration monitor</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearIteration.#ctor">
            <summary> Constructor for AbstractLinearIteration. Default norm is the 2-norm with
            no monitoring.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver">
            <summary> Partial implementation of LinearSolver</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver">
            <summary> Krylov subspace linear solver.
            Interface to a generic iterative Krylov based system solver. It solves the
            linear problem <code>Ax=b</code> for x, using preconditioning and convergence
            monitoring.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver.Solve(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Solves the given problem, writing result into the vector.</summary>
            <param name="A">Matrix of the problem.</param>
            <param name="b">Right hand side.</param>
            <param name="x">Solution is stored here. Also used as initial guess.</param>
            <returns> The solution vector x.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver.Preconditioner">
            <summary>Gets or sets the preconditioner.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver.Iteration">
            <summary>Gets or sets the iteration.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.M">
            <summary> Preconditioner to use</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.iter">
            <summary> Iteration</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.BLAS">
            <summary> Algebra operations</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.#ctor">
            <summary> Constructor for AbstractLinearSolver, using the DefaultConvergenceTest and
            no preconditioning.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.checkSizes(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks sizes of input data</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractLinearSolver.SolveI(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Solves the system</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractPreconditioner">
            <summary> Partial implementation of Preconditioner</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner">
            <summary> Preconditioner interface.
            Preconditioners are approximate solvers to some problem. They may be used
            in iterative solution procedures to speed up convergence.
            <p>
            The only method the user needs to call from this interface is setup.
            Before using the preconditioner in a LinearSolver, setup must have been
            called.
            The advantage of this is that the same internal structure of the
            preconditioner can be reused for repeated solves with the same matrix.
            This is particularly important for complicated preconditioners such as
            ILU or BlockDiagonalPreconditioner.
            </p>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner.Apply(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Solves the approximate problem with the given right hand side.
            Result is stored in given vector.</summary>
            <param name="A">Matrix to precondition</param>
            <param name="b">Right hand side of problem</param>
            <param name="x">Result is stored here</param>
            <returns>x</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner.TransApply(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Solves the approximate transpose problem with the given right hand side.
            Result is stored in given vector.</summary>
            <param name="A">Matrix to precondition</param>
            <param name="b">Right hand side of problem</param>
            <param name="x">Result is stored here</param>
            <returns>x</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner.Setup(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Sets up the preconditioner on the given matrix. Must be called before
            a system preconditioning is applied.</summary>
            <param name="A">Matrix to work on</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractPreconditioner.blas">
            <summary> Points to jmp.State.BLAS</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractPreconditioner.#ctor">
            <summary> Constructor for AbstractPreconditioner.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.AbstractPreconditioner.checkSizes(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks sizes of input data</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ArrayLinearIterationMonitor">
            <summary> Stores all the residuals in an array, which the user can retrieve afterwards.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIterationMonitor">
            <summary> Monitors the iteration of a solver.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIterationMonitor.Monitor(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32)">
            <summary> Monitors/registers current information</summary>
            <param name="r">Current residual norm.</param>
            <param name="x">Current state vector.</param>
            <param name="i">Current iteration number.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIterationMonitor.Monitor(System.Double,System.Int32)">
            <summary> Monitors/registers current information</summary>
            <param name="r">Current residual norm.</param>
            <param name="i">Current iteration number.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ArrayLinearIterationMonitor.array">
            <summary> Contains all the residuals</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ArrayLinearIterationMonitor.#ctor">
            <summary> Constructor for ArrayLinearIterationMonitor.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ArrayLinearIterationMonitor.Array">
            <summary> Retrives all the residuals in an array. Array index is the iteration
            number.
            </summary>
            <returns> Array of residuals
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.BiCGSolver">
            <summary> BiCG solver.
            BiCG solves the unsymmetric linear system <c>Ax = b</c> using the
            Preconditioned BiConjugate Gradient method.
            </summary>
            <author>  Templates </author>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.BiCGstabSolver">
            <summary> BiCG stablized solver.
            BiCGstab solves the unsymmetric linear system <code>Ax = b</code>
            using the Preconditioned BiConjugate Gradient Stabilized method
            </summary>
            <author>Templates</author>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSolver">
            <summary> Conjugate Gradients solver.
            CG solves the symmetric positive definite linear system <c>Ax=b</c>
            using the Conjugate Gradient method.
            </summary>
            <author>  Templates </author>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSSolver">
            <summary> Conjugate Gradients squared solver.
            CGS solves the unsymmetric linear system <c>Ax = b</c> using the
            Conjugate Gradient Squared method.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ChebyshevSolver">
            <summary> Chebyshev solver.
            Solves the symmetric positive definite linear system <c>Ax = b</c>
            using the Preconditioned Chebyshev Method. Chebyshev requires an acurate
            estimate on the bounds of the spectrum of the matrix.
            </summary>
            <author>  Templates </author>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ChebyshevSolver.eigmin">
            <summary> Estimates for the eigenvalue of the matrix</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ChebyshevSolver.eigmax">
            <summary> Estimates for the eigenvalue of the matrix</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ChebyshevSolver.SetEigenvalues(System.Double,System.Double)">
            <summary> Sets eigenvalue estimates</summary>
            <param name="eigmin">Smallest eigenvalue</param>
            <param name="eigmax">Largest eigenvalue</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CholeskyPreconditioner">
            <summary> Complete Choleksy preconditioner.
            It should only be used to precondition blocks of the matrix, as for
            instance in the BlockDiagonalPreconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CholeskyPreconditioner.decomp">
            <summary> The decomposition</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CompositePreconditioner">
            <summary> Composite preconditioner.
            Applies several preconditioners in sequence serially. If the preconditioners
            have already been set up, it is not necessary to call the setup method
            in this class, as it simply calls setup() on every preconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CompositePreconditioner.preconditioner">
            <summary> The preconditioners which will be applied</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CompositePreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner[])">
            <summary> Constructor for CompositePreconditioner.</summary>
            <param name="preconditioner">The preconditioners to apply.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner">
            <summary> Partial preconditioner for decomposition based methods.
            Contains some methods to make incomplete decomposition based preconditioners
            easier to implement, such as ILU and ICC.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.F">
            <summary> The decomposition matrix</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.A">
            <summary> Original matrix reference</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.diagInd">
            <summary> Diagonal indices to the decomposition matrix F.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.shift">
            <summary> Diagonal shift</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.initShift">
            <summary> Initial diagonal shift</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.fill">
            <summary> Wheter or not to allow fill</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix)">
            <summary> Constructor for DecompositionPreconditioner. Uses a default value of
            0.1 as shift, and disallows fill.</summary>
            <param name="F">Matrix to contain the decomposition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.setParamters(System.Double,System.Double,System.Boolean)">
            <summary> Sets preconditioner parameters</summary>
            <param name="initShift">Initial diagonal shift. Default is 0.</param>
            <param name="shift">Diagonal shift to apply in case of zero-pivot. 
            Default is <c>0.1</c>.</param>
            <param name="fill">Allow fill-in? Default is false.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.Factor">
            <summary> This method should create the factor F of A. When it is called, A is set,
            but not A. After the call, diagInd will be set.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.solveL(System.Double[],System.Boolean)">
            <summary> F is lower-triangular, and it is solved for.</summary>
            <param name="data">Initially the right hand side. Overwritten with solution.</param>
            <param name="diagDiv">True if the diagonal will be divided with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.SolveU(System.Double[],System.Boolean)">
            <summary> F is upper-triangular, and it is solved for.</summary>
            <param name="data">Initially the right hand side. Overwritten with solution.</param>
            <param name="diagDiv">True if the diagonal will be divided with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.SolveLT(System.Double[],System.Boolean)">
            <summary> F is lower-triangular, and F<sup>T</sup> is solved for.</summary>
            <param name="data">Initially the right hand side. Overwritten with solution.</param>
            <param name="diagDiv">True if the diagonal will be divided with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.SolveUT(System.Double[],System.Boolean)">
            <summary> F is upper-triangular, and F<sup>T</sup> is solved for.</summary>
            <param name="data">Initially the right hand side. Overwritten with solution.</param>
            <param name="diagDiv">True if the diagonal will be divided with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.GetDiagIndex(System.Int32)">
            <summary> Gets diagonal index from cache (if it exists there), or updates the
            cache with diagonal index.</summary>
            <param name="row">Row to get diagonal index for.</param>
            <returns> diagInd[row] </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.GetDiagIndex(System.Int32,System.Int32[])">
            <summary> Gets diagonal index from cache (if it exists there), or updates the
            cache with diagonal index.</summary>
            <param name="row">Row to get diagonal index for.</param>
            <param name="rowInd">The row indices to search.</param>
            <returns> diagInd[row] </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DecompositionPreconditioner.DecompositionMatrix">
            <summary> Sets decomposition matrix</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration">
            <summary> Default linear iteration object.
            This tester checks declares convergence if the absolute value of the residual
            norm is sufficiently small, or if the relative decrease is small.
            Divergence is decleared if too many iterations are spent, or the
            residual has grown too much. NaNs will also cause divergence to be flagged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.initR">
            <summary> Initial residual</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.rtol">
            <summary> Relative tolerance</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.atol">
            <summary> Absolute tolerance</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.dtol">
            <summary> Divergence tolerance</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.maxIter">
            <summary> Maximum number of iterations</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.#ctor">
            <summary> Constructor for DefaultLinearIteration. Default is 100000 iterations at
            most, relative tolerance of 1e-5, absolute tolerance of 1e-50 and a
            divergence tolerance of 1e+5.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration.SetParameters(System.Double,System.Double,System.Double,System.Int32)">
            <param name="rtol">New relative tolerance</param>
            <param name="atol">New absolute tolerance</param>
            <param name="dtol">New divergence tolerance</param>
            <param name="maxIter">Maximum number of iterations</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GaussSeidelPreconditioner">
            <summary> Gauss-Seidel preconditioner.
            Applies one sweep of Gauss-Seidel to the system matrix.
            Does not perform transpose operations.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver">
            <summary> GMRES solver.
            GMRES solves the unsymmetric linear system <c>Ax = b</c> using the
            Generalized Minimum Residual method. The GMRES iteration is restarted after
            a given number of iterations. By default it is restarted after 30 iterations.
            </summary>
            <author>  Templates </author>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.restart">
            <summary> After this many iterations, the GMRES will be restarted.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.#ctor">
            <summary> Default restart of 30</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.generatePlaneRotation(MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.RotationData)">
            <summary> Constructs a Givens rotation, to be used by applyPlaneRotation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.applyPlaneRotation(MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.RotationData)">
            <summary> Applies a Givens plane rotation</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.Restart">
            <summary> Sets restart to use</summary>
            <remark>GMRES iteration is restarted after this number of
            iterations </remark>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver.RotationData">
            <summary> Data for a Givens rotation in GMRES.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ICCPreconditioner">
            <summary> An ICC preconditioner.
            Uses an incomplete Cholesky decomposition as preconditioner. Applicable to
            symmetrical, positive definite problems.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ICCPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix)">
            <summary> Constructor for ICC.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IdentityPreconditioner">
            <summary> Identity preconditioner.
            A dummy preconditioner. Useful as a placeholder.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILUPreconditioner">
            <summary> ILU preconditioner.
            Performs an incomplete LU decomposition as a preconditioner. Applicable to
            unsymmetrical problems.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILUPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix)">
            <summary> Constructor for ILU.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IRSolver">
            <summary> Iterative Refinement.
            IR solves the unsymmetric linear system <c>Ax = b</c> using
            Iterative Refinement (preconditioned Richardson iteration).
            </summary>
            <author>  Templates </author>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IterativeSolverPreconditioner">
            <summary> Applies an iterative linear solver as preconditioner.
            Only for transpose-free problems. The convergence criteria for the
            preconditioner should not be too stringent as that can defeat the purpose of
            the preconditioner.
            <p>
            Note that if the solver doesn't converge, the exceptions are caught
            and promptly ignored.
            </p>
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IterativeSolverPreconditioner.preconditioner">
            <summary> LinearSolver to use</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IterativeSolverPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver)">
            <summary> Assigns the solver.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LinearNotConvergedException">
            <summary> Exception for lack of convergence in a linear problem.
            Contains the final computed residual.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException">
            <summary> Signals the lack of convergence of an iterative solver.
            It could be due to too stringent convergence criteria, too few iterations
            used, or simply due to a malformed problem. The number of iterations are
            stored, along with the reason (BREAKDOWN, DIVERGENCE, or something else).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.ITERATIONS_">
            <summary> Required too many iterations to converge</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.DIVERGENCE">
            <summary> Residual increased to divergence tolerance</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.BREAKDOWN">
            <summary> Breakdown detected in iteration</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.reason">
            <summary> Reason for the exception</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.iterations">
            <summary> Iteration count when this exception was thrown</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.message">
            <summary> Message describing the exception.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for NotConvergedException.</summary>
            <param name="reason">Reason for exception.</param>
            <param name="iterations">Iteration count when this exception was thrown.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.#ctor(System.Int32,System.Int32,System.String)">
            <summary> Constructor for NotConvergedException.</summary>
            <param name="reason">Reason for exception.</param>
            <param name="iterations">Iteration count when this exception was thrown.</param>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.Reason">
            <summary> Gets the reason for this exception</summary>
            <returns> Either BREAKDOWN, DIVERGENCE or ITERATIONS.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.NotConvergedException.Iterations">
            <summary> Gets the number of iterations used when this exception was thrown</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LinearNotConvergedException.r">
            <summary> Final residual</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LinearNotConvergedException.#ctor(System.Int32,System.Int32,System.Double)">
            <summary> Constructor for LinearNotConvergedException.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LinearNotConvergedException.#ctor(System.Int32,System.Int32,System.String,System.Double)">
            <summary> Constructor for LinearNotConvergedException.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LinearNotConvergedException.Residual">
            <summary> Returns final computed residual</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LUPreconditioner">
            <summary> Complete LU factorization as preconditioner.
            It should only be used to precondition blocks of the matrix, as for
            instance in the BlockDiagonalPreconditioner. Transpose operation is not
            supported. </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LUPreconditioner.decomp">
            <summary> The decomposition</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration">
            <summary> Linear iteration object based on matrix norms.
            Extends the default linear iteration object to compare with the norm of the
            system matrix and the right hand side. Can often be a better convergence
            criteria than the default, but requires the computation of the matrix norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration.normA">
            <summary> Norm of the system matrix</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration.normb">
            <summary> Norm of the right hand side</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration.#ctor">
            <summary> Constructor for MatrixLinearIteration. Default is 100000 iterations at
            most, relative tolerance of 1e-5, absolute tolerance of 1e-50 and a
            divergence tolerance of 1e+5.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration.setNorms(System.Double,System.Double)">
            <summary> Sets the norms</summary>
            <param name="normA">Norm of the system matrix
            </param>
            <param name="normb">Norm of the right hand side
            </param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner">
            <summary> Multigrid preconditioner.
            Uses a geometric multigrid, thus the user needs to create matrix operators
            and restriction operators. The preconditioner supports different kinds
            of cycles (V, W etc), and the smoothers can be chosen by the user.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.restrict">
            <summary> Restriction operators</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.subA">
            <summary> Matrices on each grid (finer to coarser)</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.subSolver">
            <summary> Solvers on each grid</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.pre">
            <summary> Number of pre-, mid, and postsmoothings</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.mid">
            <summary> Number of pre-, mid, and postsmoothings</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.post">
            <summary> Number of pre-, mid, and postsmoothings</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.numLevels">
            <summary> Number of sublevels</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[],MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[],MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner[],System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for Multigrid.</summary>
            <param name="subA">Coefficient matrix for each level (including the finest).</param>
            <param name="restrict">Restriction operators.</param>
            <param name="subSolver">Solvers at each level.</param>
            <param name="pre">Number of pre-smoothings.</param>
            <param name="mid">Number of descents (1=V-cycle, 2=W-cycle etc).</param>
            <param name="post">Number of post-smoothings.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[],MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[],MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner[])">
            <summary> Constructor for Multigrid. Uses pre=mid=post=1.</summary>
            <param name="subA">Coefficient matrix for each level (including the finest).</param>
            <param name="restrict">Restriction operators.</param>
            <param name="subSolver">Solvers at each level.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[],MathNet.Numerics.LinearAlgebra.Sparse.IMatrix[])">
            <summary> Constructor for Multigrid. Uses pre=mid=post=1 and GaussSeidel
            subsolvers.</summary>
            <param name="subA">Coefficient matrix for each level (including the finest).</param>
            <param name="restrict">Restriction operators.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.check">
            <summary> Checks for internal consistency</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.cycle(System.Int32,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Performs recursive multigrid cycle</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner.transCycle(System.Int32,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Performs recursive multigrid cycle for transpose problem</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.NamespaceDoc">
            <summary>
            Iterative linear solvers and preconditioners. Solves the linear problem
            <code>A x = b</code>
            <p>with respect to <c>x</c>. A must be an <c>n*n</c>
            non-singular matrix, and <c>x</c> and <c>b</c> are
            <c>n</c>-vectors. Note that the value of <c>x</c> is
            used as an initial guess, and the convergence can be improved by
            using a good guess.</p>
            
            <h3>Iterative linear solvers</h3>
            <p>The solvers are modified versions of the 
            <a href="http://www.netlib.org/templates">Templates</a>
            versions. All the solvers implement the interface 
            <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver"/>, and its usage can be
            illustrated by an example:</p>
            
            <code>
            double[] Solver(Matrix A, Vector x, Vector b) 
            {
            	LinearSolver solver = new CGSolver();
            	try 
            	{
            		x = solver.Solve(A, x, b);
            	} 
            	catch (LinearNotConvergedException e) 
            	{
            		Console.WriteLine("Linear solver did not converge");
            		Console.WriteLine("Final residual = " + e.Residual);
            		Console.WriteLine("Number of iterations = " + e.Iterations);
            		Console.WriteLine("Reason = ");
            		if (e.Reason == NotConvergedException.BREAKDOWN)
            			Console.WriteLine("breakdown");
            		else if (e.Reason == NotConvergedException.DIVERGENCE)
            			Console.WriteLine("divergence");
            		else if (e.getReason() == NotConvergedException.ITERATIONS)
            			Console.WriteLine("too many iterations");
            	}
            	return Blas.Default.GetArrayCopy(x);
            }
            </code>
            
            <p>In this example, the solver <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSolver"/> was
            used. Other solvers include the following:</p>
            
            <table>
            <tr>
            	<th>Solver </th>
            	<th>SPD </th>
            	<th>Transpose </th>
            	<th>Notes </th>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.BiCGSolver"/></td>
            	<td> </td>
            	<td>Yes </td>
            	<td> </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.BiCGstabSolver"/></td>
            	<td> </td>
            	<td> </td>
            	<td> </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSolver"/></td>
            	<td>Yes </td>
            	<td> </td>
            	<td> </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSSolver"/></td>
            	<td> </td>
            	<td> </td>
            	<td> </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ChebyshevSolver"/></td>
            	<td>Yes </td>
            	<td> </td>
            	<td>Needs extremal eigenvalues </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GMRESSolver"/></td>
            	<td> </td>
            	<td> </td>
            	<td>Restarted version </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IRSolver"/></td>
            	<td> </td>
            	<td> </td>
            	<td> </td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver"/></td>
            	<td> </td>
            	<td>Yes </td>
            	<td>Uses left and right preconditioning </td>
            </tr>
            </table>
            
            <p>SPD means that the matrix must be symmetrical, positive
            definite, while transpose means that transpose matrix/vector
            multiplication and preconditioning is necessary.</p>
            
            <h3>Convergence criteria</h3>
            <p><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIterationMonitor"/> monitors the iteration, 
            and provides both convergence tracking and detection. There are 
            two implementations of <c>ILinearIterationMonitor</c>:
            </p>
            <ul>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.DefaultLinearIteration"/> declares convergence 
            	when the current residual has decrease by a certain factor 
            	compared to the initial residual.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MatrixLinearIteration"/> a <c>DefaultLinearIteration</c>, 
            	but the matrix-norm to scale the initial residual.</li>
            </ul>
            <p>The method <see cref="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver.Iteration"/> is used to set a 
            <c>ILinearIteration</c>.</p>
            
            <p>Another use of the iteration objects is in the monitoring they
            can perform.  By default, no monitoring is done, but the
            method <see cref="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearIteration.Monitor"/> allows one to attach a
            monitor. The following are available:</p>
            <ul>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ArrayLinearIterationMonitor"/> stores the iteration 
            	progress in an array.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.OutputLinearIterationMonitor"/> outputs the information 
            	to a stream, by default <c>System.Console.Err</c>.</li>
            </ul>
            <p>An easy way to attach a monitor without changing the iteration
            object is the following:</p>
            <code>
            LinearSolver solver = new CGSolver();
            solver.Iteration.Monitor = new OutputLinearIterationMonitor();
            </code>
            
            <h3>Preconditioning</h3>
            <p>To speed up convergence of the iterative solvers,
            preconditioners are often necessary. Use the method 
            <see cref="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILinearSolver.Preconditioner"/> to set the 
            preconditioner. Available preconditoners are:</p>
            <table>
            <tr>
            	<th>Preconditioner</th>
            	<th>Notes</th>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.GaussSeidelPreconditioner"/></td>
            	<td></td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ICCPreconditioner"/></td>
            	<td>Optional fill-in and diagonal scaling.</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.ILUPreconditioner"/></td>
            	<td>Optional fill-in and diagonal scaling.</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner"/></td>
            	<td></td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SORPreconditioner"/></td>
            	<td></td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner"/></td>
            	<td></td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.MultigridPreconditioner"/></td>
            	<td>Geometrical variant.</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CholeskyPreconditioner"/></td>
            	<td>For sub-problems only.</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.LUPreconditioner"/></td>
            	<td>For sub-problems only</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QRPreconditioner"/></td>
            	<td>For sub-problems only</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CompositePreconditioner"/></td>
            	<td>Applies a sequence of preconditioners</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IdentityPreconditioner"/></td>
            	<td>Default preconditioner, does nothing</td>
            </tr>
            <tr>
            	<td><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.IterativeSolverPreconditioner"/></td>
            	<td>Has slack convergence criteria</td>
            </tr>
            </table>
            
            <p>For further details on the preconditioners, see the 
            <a href="http://www.netlib.org/templates">Templates</a> page.</p>
            
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.NullLinearIterationMonitor">
            <summary> An iteration monitor which does nothing.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.OutputLinearIterationMonitor">
            <summary> Outputs iteration information to an output stream.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.OutputLinearIterationMonitor.stream">
            <summary> Platform-dependent output</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.OutputLinearIterationMonitor.#ctor(System.IO.Stream)">
            <summary> Constructor for OutputLinearIterationMonitor</summary>
            <param name="stream">Writes iteration count and current residual here</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.OutputLinearIterationMonitor.#ctor">
            <summary> Constructor for OutputLinearIterationMonitor, using System.err.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner">
            <summary> Neumann series preconditioner.
            Expands the inverse of the matrix into a Neumann series, ie.
            <c>A<sup>-1</sup>=I + (I-A) + (I-A)<sup>2</sup> + ...</c>. This
            series only converge if the norm of A is less than 1. If the norm 
            is greater, a scaling factor may be supplied.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.terms">
            <summary> Number of terms to use in the expansion</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.Am">
            <summary> The matrix I-wA</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.w">
            <summary> Scaling factor</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.#ctor">
            <summary> Creates preconditioner with a default of two terms and scaling equal 1.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.setParameters(System.Double,System.Int32)">
            <summary> Sets parameters</summary>
            <param name="w">Matrix-scaling.</param>
            <param name="terms">Number of terms in the expansion.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.PolynomialPreconditioner.Matrix">
            <summary> Sets matrix to contain I-wA</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver">
            <summary> Quasi-Minimal Residual method.
            QMR solves the unsymmetric linear system <c>Ax = b</c> using the
            Quasi-Minimal Residual method. QMR uses two preconditioners, and by default
            these are the same preconditioner.
            </summary>
            <author>  Templates </author>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver.M1">
            <summary> Left preconditioner</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver.M2">
            <summary> Right preconditioner</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver.setM1(MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner)">
            <summary> Sets left preconditioner</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QMRSolver.setM2(MathNet.Numerics.LinearAlgebra.Sparse.Linear.IPreconditioner)">
            <summary> Sets right preconditioner</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QRPreconditioner">
            <summary> Complete QR factorization as preconditioner.
            It should only be used to precondition blocks of the matrix, as for
            instance in the BlockDiagonalPreconditioner. Transpose operations are not
            supported.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.QRPreconditioner.decomp">
            <summary> The decomposition</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SORPreconditioner">
            <summary> SOR preconditioner.
            Applies one sweep of SOR to the system matrix. Sequential. For best
            performance, a good choice of the overrelaxation parameter omega must be
            made (0 &lt; omega &lt; 2). Does not perform transpose operations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SORPreconditioner.omega">
            <summary> Overrelaxation parameter</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SORPreconditioner.#ctor">
            <summary> Constructor for SOR. Uses omega=1 by default.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SORPreconditioner.Parameters">
            <summary> Sets over-relaxation parameter.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner">
            <summary> SSOR preconditioner.
            Uses a symmetrical SOR as a preconditioner. Meant for symmetrical matrices.
            For best performance, omega must be carefully chosen (between 0 and 2).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner.omega">
            <summary> Overrelaxation parameter</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner.diag">
            <summary> All diagonal entries of the matrix</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner.diagInd">
            <summary> Indices to the diagonal entries of the matrix</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner.#ctor">
            <summary> Constructor for SSOR. Uses omega=1 by default.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Linear.SSORPreconditioner.Parameters">
            <summary> Sets over-relaxation parameter.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver">
            <summary> Partial implementation of MixedSolver</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver">
            <summary> Solver for mixed problems</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver.solve(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Solves the given mixed problem.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver.SubSolver">
            <summary>Gets or sets the internal solver</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver.Iteration">
            <summary> Gets or sets the iteration</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver.blas">
            <summary> Local reference</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver.solver">
            <summary> LinearSolver to use</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver.iter">
            <summary> Convergence tester</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver.#ctor">
            <summary> Constructor for AbstractMixedSolver, with CG as solver and default
            linear iteration object.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.AbstractMixedSolver.checkSolveArguments(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Checks that all sizes conform, or else throws an exception.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.CGUzawaSolver">
            <summary> Uzawa algorithm using the CG method</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.GradientUzawaSolver">
            <summary> Uzawa algorithm using gradient approach.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.NamespaceDoc">
            <summary>
            Iterative mixed solvers. The mixed problem is
            <code>
            A q + B' u = f
            B q + C  u = g
            </code>
            <p>where <c>A</c> is symmetrical, positive definite. While a
            mixed problem can be formulated as a linear problem, a mixed
            solver can often be more efficient.</p>
            <p>The basic interface is <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver"/> and there 
            are three implementations:</p>
            <ul>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.UzawaSolver"/> - basic Uzawa algorithm, requires a steplength.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.GradientUzawaSolver"/> - Uzawa algorithm with gradient descent.</li>
            	<li><see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.CGUzawaSolver"/> - Uzawa algorithm using a conjugate gradient descent.</li>
            </ul>
            <p>The last method is often the fastest. All these use a solver for	the <c>A</c> matrix, 
            by default <see cref="T:MathNet.Numerics.LinearAlgebra.Sparse.Linear.CGSolver"/> 
            is used, but different solvers can be set using <see cref="P:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.IMixedSolver.SubSolver"/>.</p>
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.UzawaSolver">
            <summary> Uzawa algorithm for mixed problems. Requires a steplength, but uses length of
            <c>1</c> by default.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.UzawaSolver.alpha">
            <summary> Steplength (fixed)</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.UzawaSolver.#ctor">
            <summary> Constructor for Uzawa. Uses steplength of 1 by default.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Mixed.UzawaSolver.Steplength">
            <summary> Sets steplength (alpha) to use in the algorithm</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.AbstractBLAS">
            <summary> Partial implementation of BLAS</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS">
            <summary> Basic linear algebra subroutines. The methods present here are
            suitable for sparse matrices and iterative solvers, as such not all
            the <a href="http://www.netlib.org/blas">Fortran BLAS</a> methods
            have been implemented. Of particular note is the absence of
            matrix/matrix multiplication and triangular solvers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Transpose(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>B = A<sup>T</sup></c>.</summary>
            <returns> B </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.AddDiagonal(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = A + alpha*I</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Norm(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.NORMS)">
            <summary> Computes the specified norm of the matrix.</summary>
            <param name="normtype">Any of NORM1, NORMF or NORMINF.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Scale(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = alpha*A</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Copy(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>B = A</c>.</summary>
            <returns> B </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Copy(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <c>B = A(startRow:stopRow,startColumn:stopColumn)</c>.
            Start-indices are inclusive, stop-indices are exclusive.</summary>
            <returns> B </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Zero(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = 0</c>. The non-zero structure is preserved for sparse
            matrices, speeding up later reconstructions.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Cardinality(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Number of non-zero entries of A</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*A*x + beta*y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = A*x + beta*y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*A*x + y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = A*x + y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A*x + beta*y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A*x + y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A*x + beta*y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.MultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A*x + y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Mult(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A*x</c>. x can not be the same as y</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Mult(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A*x</c>. x can not be the same as y</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*A<sup>T</sup>*x + beta*y</c>. x can not be the same as
            y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = A<sup>T</sup>*x + beta*y</c>. x can not be the same as y or
            z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*A<sup>T</sup>*x + y</c>. x can not be the same as y or
            z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = A<sup>T</sup>*x + y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A<sup>T</sup>*x + beta*y</c>. x can not be the same as
            y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A<sup>T</sup>*x + y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A<sup>T</sup>*x + beta*y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMultAdd(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A<sup>T</sup>*x + y</c>. x can not be the same as y.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMult(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*A<sup>T</sup>*x</c>. x can not be the same as y</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.TransMult(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = A<sup>T</sup>*x</c>. x can not be the same as y</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Rank1(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = alpha*x*y<sup>T</sup> + A</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Rank1(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = x*y<sup>T</sup> + A</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Rank1(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = alpha*x*x<sup>T</sup> + A</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Rank1(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> <c>A = x*x<sup>T</sup> + A</c>.</summary>
            <returns> A </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*x + beta*y</c>.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*x + y</c>.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = x + beta*y</c>.</summary>
            <returns> z
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = x + y</c>.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*x + beta*y</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*x + y</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = x + beta*y</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Add(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = x + y</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Dot(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>x<sup>T</sup>*y</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Norm(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.NORMS)">
            <summary> Computes the specified norm of the vector.</summary>
            <param name="normtype">One of NORM1, NORM2 or NORMINF.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.ScaleCopy(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = alpha*x</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Scale(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>x = alpha*x</c>.</summary>
            <returns> x </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.SetVector(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>x = alpha</c>.</summary>
            <returns> x </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Copy(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = x</c>.</summary>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Copy(MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32,System.Int32)">
            <summary> <c>y = x[start:stop)</c>.</summary>
            <param name="start">Inclusive index.</param>
            <param name="stop">Exclusive index.</param>
            <returns> y </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Zero(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>x = 0</c>. The non-zero structure is preserved for sparse
            vectors, speeding up later reconstructions.</summary>
            <returns> x </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Cardinality(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Number of non-zero entries of x.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Scatter(MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair,System.Double[])">
            <summary> Scatter x into the dense array y.</summary>
            <returns> y
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Gather(System.Double[])">
            <summary> Gathers the non-zero entries of the dense array x.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.Gather(System.Int32[],System.Double[])">
            <summary> Gathers the given indices of xData.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.GetArrayCopy(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Exports the matrix into a dense structure, row-oriented.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.GetArrayCopy(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Exports the vector into a dense structure.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBLAS.SetVector(System.Double[],MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>y = x</c>.</summary>
            <returns> x </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.AbstractMatrix">
            <summary> Partial implementation of Matrix</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IMatrix">
            <summary> Basic matrix interface.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IMatrix.Square">
            <summary>Returns true if the matrix is square.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.AbstractMatrix.row_count">
            <summary> Matrix dimensions</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.AbstractMatrix.column_count">
            <summary> Matrix dimensions</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.AbstractMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for AbstractMatrix.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.AbstractMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Constructor for AbstractMatrix, same size as A.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.AbstractVector">
            <summary> Partial implementation of Vector.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IVector">
            <summary> Basic vector interface</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.AbstractVector.length_">
            <summary> Size of the vector</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.AbstractVector.#ctor(System.Int32)">
            <summary> Constructor for AbstractVector.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.AbstractVector.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Constructor for AbstractVector, same size as x</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.BlockMatrix">
            <summary> Block matrix</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix">
            <summary> Matrix consisting of sub-matrices</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix.GetBlock(System.Int32)">
            <summary> Returns the matrix in block i</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix.GetBlockRowIndices(System.Int32)">
            <summary> Returns the row-indices of block i</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix.GetBlockColumnIndices(System.Int32)">
            <summary> Returns the column-indices of block i</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix.SetBlock(System.Int32,System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Sets block i to the given matrix, with row and column indices</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessMatrix.BlockCount">
            <summary>Gets the number of block.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockMatrix.A">
            <summary> Sub-matrices (blocks)</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockMatrix.row">
            <summary> Row-indices for each block</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockMatrix.column">
            <summary> Column-indices for each block</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.BlockMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for BlockMatrix.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.BlockVector">
            <summary> Block vector</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector">
            <summary> Vector consisting of sub-vectors</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector.GetBlock(System.Int32)">
            <summary> Returns the vector in block i</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector.GetBlockIndices(System.Int32)">
            <summary> Returns the indices of block i</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector.SetBlock(System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Sets block i to the given vector with indices</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector.Array">
            <summary> Returns an array of the same size as this vector. Each element is zeroed.
            The purpose of this method is to avoid excessive memory allocation and
            de-allocation. Note that this is not thread safe.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockVector.x">
            <summary> Sub-vectors (blocks)</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockVector.index">
            <summary> Indices for each block</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.BlockVector.dense">
            <summary> Dense representation (only valid after assemble())</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.BlockVector.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for BlockVector.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix">
            <summary> Coordinate storage matrix. The data is not kept sorted.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix">
            <summary> Matrix with elemental access operations. The block-wise operations will
            typically be faster than the elementwise operations, and the extractions
            methods present here are not likely to be as fast as the custom accessors
            the matrix may implement.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.AddValue(System.Int32,System.Int32,System.Double)">
            <summary> A(row,column) += value</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.SetValue(System.Int32,System.Int32,System.Double)">
            <summary> A(row,column) = value</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.GetValue(System.Int32,System.Int32)">
            <summary> Returns A(row,column)</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.AddValues(System.Int32[],System.Int32[],System.Double[0:,0:])">
            <summary> A(row,column) += values, blockwise</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.SetValues(System.Int32[],System.Int32[],System.Double[0:,0:])">
            <summary> A(row,column) = values, blockwise</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix.GetValues(System.Int32[],System.Int32[])">
            <summary> Returns the block A(row,column)</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ICoordinateAccessMatrix">
            <summary> Matrix with access by row/column vectors</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IVectorAccess">
            <summary> Data-access without index-access. Note that matrices storing data as vectors
            may implement this interface, despite its name.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IVectorAccess.Data">
            <summary>Gets a vector containing all the data of the matrix or vector.
            No ordering may be assumed.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparse">
            <summary>Sparse matrix or vector.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ISparse.Compact">
            <summary> Compacts the storage. May require re-allocation, 
            so it can fail if there is insufficient memory available.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ICoordinateAccessMatrix.SetData(System.Double[])">
            <summary> Sets the data</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.ICoordinateAccessMatrix.RowIndices">
            <summary>Gets or sets the row indices.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.ICoordinateAccessMatrix.ColumnIndices">
            <summary>Gets or sets the column indices.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.row">
            <summary> The rows</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.column">
            <summary> The columns</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.data">
            <summary> The data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.offset">
            <summary> Current insertion offset</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for CoordinateMatrix. No pre-allocation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for CoordinateMatrix.</summary>
            <param name="numEntries">Initial number of non-zero entries.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary> Constructor for CoordinateMatrix.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.GetIndex(System.Int32,System.Int32)">
            <summary> Tries to get the index, or allocates more space if needed</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.Realloc(System.Int32)">
            <summary> Reallocates the internal arrays to a new size</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.CoordinateMatrix.Search(System.Int32,System.Int32)">
            <summary> Searches for the given entry. Returns -1 if it is not found</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.DenseVector">
            <summary> Dense vector.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDenseAccessVector">
            <summary> Vector with fast array access.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDense">
            <summary>Dense matrix or vector.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IDenseAccessVector.Vector">
            <summary> Gets or sets a dense array representation of the vector. </summary>
            <remarks>The array is backed directly by the vector (changing it changes 
            the vector). Also, when set, no deep copy is performed.</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector">
            <summary> Vector with elemental access operations. The block-wise operations will
            typically be faster than the elementwise operations, and the extractions
            methods present here are not likely to be as fast as the custom accessors
            the vector may implement.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.AddValue(System.Int32,System.Double)">
            <summary> x(index) += value</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.SetValue(System.Int32,System.Double)">
            <summary> x(index) = value</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.GetValue(System.Int32)">
            <summary> Returns x(index)</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.AddValues(System.Int32[],System.Double[])">
            <summary> x(index) += values, blockwise</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.SetValues(System.Int32[],System.Double[])">
            <summary> x(index) = values, blockwise</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector.GetValues(System.Int32[])">
            <summary> Returns the block x(index)</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.DenseVector.data">
            <summary> Internal representation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.DenseVector.#ctor(System.Int32)">
            <summary> Constructor for DenseVector.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Constructor for DenseVector, and copies the contents from the
            supplied vector.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Factory">
            <summary> Convenience factory methods for the iterative methods. 
            Creates empty work-vectors.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.#ctor">
            <summary> No need to create an instance</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.createVector(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Creates a new, empty vector based upon the given template</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.createVector(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32)">
            <summary> Creates a new, empty vector based upon the given template with the
            given size.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.createVectors(MathNet.Numerics.LinearAlgebra.Sparse.IVector[])">
            <summary> Creates new, empty vectors based upon the given templates</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.createVectors(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32)">
            <summary> Creates an array of new, empty vectors based upon the given template</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Factory.createVectors(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32,System.Int32)">
            <summary> Creates an array of new, empty vectors based upon the given template
            with the given size of the output vectors.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NORMS.NORM1">
            <summary>1-norm, for matrices and vectors.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NORMS.NORM2">
            <summary>2-norm, for vectors.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NORMS.NORMF">
            <summary>Frobenius norm, for matrices.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.NORMS.NORMINF">
            <summary>Infinity norm, for matrices and vectors.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Blas">
            <summary> Contains access to the default BLAS.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Blas.#ctor">
            <summary>Prevent instanciation.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.Blas.blas">
            <summary> Algebraic operations. Chose desired implementation (sequential, parallel)</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IMatrixAccess">
            <summary> Data-access without index-access</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IMatrixAccess.Data">
            <summary> Returns a (possibly ragged) 2D array containing the data of the object,
            without the indices. No ordering may be assumed.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparseColumnAccessMatrix">
            <summary> Sparse matrix with fast column access.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ISparseColumnAccessMatrix.GetColumn(System.Int32)">
            <summary> Returns a sparse representation of the given column. The view is directly
            backed by the matrix, so changes in it changes the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ISparseColumnAccessMatrix.SetColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair)">
            <summary> Sets column i equal x. The indices must be sorted.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparseColumnRowAccessMatrix">
            <summary> Sparse matrix with fast access to the whole structure, with column-major
            indices.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.ISparseColumnRowAccessMatrix.Matrix">
            <summary> Returns a sparse representation of the given row. The view is directly
            backed by the matrix, so changes in it changes the matrix.</summary>
            <remarks>When setting the whole,  The indices must be sorted.</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix">
            <summary> Sparse matrix with fast row-based access.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix.GetRow(System.Int32)">
            <summary> Returns a sparse representation of the given row</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowAccessMatrix.SetRow(System.Int32,MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair)">
            <summary> Sets row i equal x</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowColumnAccessMatrix">
            <summary> Sparse matrix with fast access to the whole structure, with row-major
            indices.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.ISparseRowColumnAccessMatrix.Matrix">
            <summary>Gets or sets a sparse representation of the matrix (backed by the matrix).</summary>
            <remarks>When setting the whole matrix, the indices must be sorted.</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IZeroColumnMatrix">
            <summary> Matrix supporting zeroing of columns</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IZeroColumnMatrix.ZeroColumns(System.Int32[],System.Double)">
            <summary> Zeros each given column, and modifies the diagonal. Useful for enforcing
            essential boundary conditions (such as Dirichlet).</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IZeroRowMatrix">
            <summary> Matrix supporting zeroing of rows</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IZeroRowMatrix.ZeroRows(System.Int32[],System.Double)">
            <summary> Zeros each given row, and modifies the diagonal. Useful for enforcing
            essential boundary conditions (such as Dirichlet).</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessZeroColumnMatrix">
            <summary> Matrix with elemental access and supporting zeroing of columns.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessZeroRowMatrix">
            <summary> Matrix with elemental access and supporting zeroing of rows.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDenseColumnAccessMatrix">
            <summary> Matrix with fast dense column access.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IDenseColumnAccessMatrix.GetColumn(System.Int32)">
            <summary> Returns the given column. The array is backed directly by the matrix
            (changing it changes the matrix).</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IDenseColumnAccessMatrix.SetColumn(System.Int32,System.Double[])">
            <summary> Sets column i equal x. No deep copying is performed.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDenseColumnRowAccessMatrix">
            <summary>Dense matrix with fast access to the whole structure, 
            with column-major indices.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IDenseColumnRowAccessMatrix.Matrix">
            <summary>Gets or sets a dense representation of the matrix, with the indices denoting
            column-offsets (backed by the matrix).</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDenseRowAccessMatrix">
            <summary> Matrix with fast dense row access.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IDenseRowAccessMatrix.GetRow(System.Int32)">
            <summary> Returns the given row. The array is backed directly by the matrix
            (changing it changes the matrix).</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IDenseRowAccessMatrix.SetRow(System.Int32,System.Double[])">
            <summary> Sets row i equal x. No deep copying is performed.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IDenseRowColumnAccessMatrix">
            <summary> Dense matrix with fast access to the whole structure, with row-major indices.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.IDenseRowColumnAccessMatrix.Matrix">
            <summary>Gets or sets a dense representation of the matrix, with 
            the indices denoting row-offsets. The array is backed directly 
            by the matrix (changing it changes the matrix).</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair">
            <summary> An index/data pairing with integer indices and double-precision data.
            Note that the length of the indices and the data need not be equal.
            Furthermore, the indices must be kept sorted in most cases.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair.indices">
            <summary> Integer indices</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair.data">
            <summary> Double-precision data</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair.#ctor(System.Int32[],System.Double[])">
            <summary> Constructor for IntDoubleVectorPair.</summary>
            <param name="indices">Indices</param>
            <param name="data">Data</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair.Clone">
            <summary> Deep copy of the object</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntDoubleVectorPair.Copy(System.Int32)">
            <summary> Copy of the data between index[i] and index[i+1]</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple">
            <summary> Dual indices and data paired together. Used by some of the faster 
            matrices. major contains the index for each data-entry, while minor is either 
            uses as row- or column-delimiters. Within two minor-indices, the major-indices
            must be sorted for most applications.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.major">
            <summary> Major indices, as long as data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.minor">
            <summary> Minor indices, shorter than data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.data">
            <summary> Double-precision data</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.#ctor(System.Int32[],System.Int32[],System.Double[])">
            <summary> Constructor for IntIntDoubleVectorTriple.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.Clone">
            <summary> Deep copy of the object</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IntIntDoubleVectorTriple.copy(System.Int32)">
            <summary> Copy of the index/data pair between minor[i] and minor[i+1]</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.IShellMatrix">
            <summary> Matrix with external storage and custom matrix/vector product.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IShellMatrix.MultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> <c>z = alpha*A*x + beta*y</c>. x can not be the same as y or z.</summary>
            <returns> z </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.IShellMatrix.TransMultAdd(System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Double,MathNet.Numerics.LinearAlgebra.Sparse.IVector,MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary>
            <c>z = alpha*A<sup>T</sup>*x + beta*y</c>. x can not be the same as y or z.
            </summary>
            <returns> z </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.ISparseAccessVector">
            <summary> Vector with a sparse view.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.ISparseAccessVector.Vector">
            <summary>Gets a sparse view of the vector. The vector backs the view directly,
            so changes in it changes the vector.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MathNet.Numerics.LinearAlgebra.Sparse.NamespaceDoc" -->
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SequentialBLAS">
            <summary> Sequential BLAS implementation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SequentialBLAS.block2array(MathNet.Numerics.LinearAlgebra.Sparse.IBlockAccessVector)">
            <summary> Populates the dense array of x with its data, and returns it</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix">
            <summary> Sparse matrix stored as 2D ragged columns. For best performance during
            assembly, ensure that enough memory is allocated at construction time,
            as re-allocation may be time-consuming.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.data">
            <summary> Matrix data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.rowIndex">
            <summary> Row indices. These are kept sorted within each column.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.used">
            <summary> Number of indices in use on each column.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.isCompact">
            <summary> Is the matrix compacted?</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary> Constructor for SparseColumnMatrix.</summary>
            <param name="nz">Initial number of non-zeros on each column</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for SparseColumnMatrix.</summary>
            <param name="nz">Initial number of non-zeros on each column</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for SparseColumnMatrix. Zero initial pre-allocation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32[])">
            <summary> Constructor for SparseColumnMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Initial number of non-zeros on each column.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32)">
            <summary> Constructor for SparseColumnMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Initial number of non-zeros on each column.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Constructor for SparseColumnMatrix, and copies the contents from the
            supplied matrix.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.Compact(System.Int32)">
            <summary> Compacts the column-indices and entries.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnMatrix.GetRowIndex(System.Int32,System.Int32)">
            <summary> Tries to find the row-index in the given column. If it is not found,
            a reallocation is done, and a new index is returned.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix">
            <summary> Sparse matrix stored as a vector, column major</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.data">
            <summary> Matrix data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.rowIndex">
            <summary> Row indices. These are kept sorted within each column.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.columnIndex">
            <summary> Indices to the start of each column</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.used">
            <summary> Number of indices in use on each column.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.isCompact">
            <summary> Is the matrix compacted?</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary> Constructor for SparseColumnRowMatrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for SparseColumnRowMatrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32)">
            <summary> Constructor for SparseColumnRowMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32[])">
            <summary> Constructor for SparseColumnRowMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseColumnRowMatrix.GetRowIndex(System.Int32,System.Int32)">
            <summary> Tries to find the col-index in the given row. If it is not found,
            a reallocation is done, and a new index is returned. If there is no more
            space for further allocation, an exception is thrown.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix">
            <summary> Sparse matrix stored as one long vector, row major.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.data">
            <summary> Matrix data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.columnIndices">
            <summary> Column indices. These are kept sorted within each row.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.rowIndices">
            <summary> Indices to the start of each row</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.used">
            <summary> Number of indices in use on each row.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.isCompact">
            <summary> Is the matrix compacted?</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32[])">
            <summary> Constructor for SparseRowColumnMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32)">
            <summary> Constructor for SparseRowColumnMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary> Constructor for SparseRowColumnMatrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for SparseRowColumnMatrix.</summary>
            <param name="nz">Maximum number of non-zeros on each row</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowColumnMatrix.GetColumnIndex(System.Int32,System.Int32)">
            <summary> Tries to find the col-index in the given row. If it is not found,
            a reallocation is done, and a new index is returned. If there is no more
            space for further allocation, an exception is thrown.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix">
            <summary> Sparse matrix stored as 2D ragged rows. For best performance during
            assembly, ensure that enough memory is allocated at construction time,
            as re-allocation may be time-consuming.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.data">
            <summary> Matrix data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.columnIndex">
            <summary> Column indices. These are kept sorted within each row.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.used">
            <summary> Number of indices in use on each row.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.isCompact">
            <summary> Is the matrix compacted?</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32[])">
            <summary> Constructor for SparseRowMatrix, and copies the contents from the
            supplied matrix.
            </summary>
            <param name="nz">Initial number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix,System.Int32)">
            <summary> Constructor for SparseRowMatrix, and copies the contents from the
            supplied matrix.</summary>
            <param name="nz">Initial number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Constructor for SparseRowMatrix, and copies the contents from the
            supplied matrix. Zero initial pre-allocation.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary> Constructor for SparseRowMatrix.</summary>
            <param name="nz">Initial number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructor for SparseRowMatrix.</summary>
            <param name="nz">Initial number of non-zeros on each row.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for SparseRowMatrix. Zero initial pre-allocation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.GetColumnIndex(System.Int32,System.Int32)">
            <summary> Tries to find the col-index in the given row. If it is not found,
            a reallocation is done, and a new index is returned.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseRowMatrix.Compact(System.Int32)">
            <summary> Compacts the row-indices and entries.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector">
            <summary> Sparse vector.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.data">
            <summary> Data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.ind">
            <summary> Indices to data</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.used">
            <summary> How much has been used</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.#ctor(System.Int32,System.Int32)">
            <summary> Constructor for SparseVector.</summary>
            <param name="nz">Initial number of non-zeros.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IVector,System.Int32)">
            <summary> Constructor for SparseVector, and copies the contents from the
            supplied vector.</summary>
            <param name="nz">Initial number of non-zeros.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Constructor for SparseVector, and copies the contents from the
            supplied vector. Zero initial pre-allocation.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.#ctor(System.Int32)">
            <summary> Constructor for SparseVector. Zero initial pre-allocation</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.SparseVector.GetIndex(System.Int32)">
            <summary> Tries to find the index. If it is not found, a reallocation is done, and
            a new index is returned.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities">
            <summary> Utilities for the testers</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getDoubleArray(System.Int32,System.Random)">
            <summary> Creates a double array of the given size</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getDoubleArray(System.Int32,System.Int32,System.Random)">
            <summary> Creates a double array of the given size</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getIntArray(System.Int32,System.Random)">
            <summary> Creates an integer array of the given size and maximum amplitude</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getInt(System.Int32,System.Random)">
            <summary> Returns an integer between zero (inclusive) and max (exclusive)</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getElMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix)">
            <summary> Dense representation of the matrix using getValue</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix)">
            <summary> Dense representation of the matrix using getValues</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getMatrixCopy(MathNet.Numerics.LinearAlgebra.Sparse.IMatrix)">
            <summary> Dense representation of the matrix using getArrayCopy</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getElVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector)">
            <summary> Dense representation of the vector using getValue</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector)">
            <summary> Dense representation of the vector using getValues</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.getVectorCopy(MathNet.Numerics.LinearAlgebra.Sparse.IVector)">
            <summary> Dense representation of the vector using getArrayCopy</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.SetAssembleRowMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Row-wise assembly using setValue</summary>
            <param name="nu">Maximum bandwidth on each row
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setAssembleColumnMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Column-wise assembly using set</summary>
            <param name="nu">Maximum bandwidth on each column
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setAssembleVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector)">
            <summary> Assembly using set</summary>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setsAssembleRowMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Row-wise assembly using setValues</summary>
            <param name="nu">Maximum bandwidth on each row
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.addsAssembleRowMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Row-wise assembly using addValues</summary>
            <param name="nu">Maximum bandwidth on each row
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.AddAssembleRowMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Row-wise assembly using add</summary>
            <param name="nu">Maximum bandwidth on each row
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.addsAssembleColumnMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Column-wise assembly using addValues</summary>
            <param name="nu">Maximum bandwidth on each column
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setsAssembleColumnMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Column-wise assembly using setValues</summary>
            <param name="nu">Maximum bandwidth on each column
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.addAssembleColumnMatrix(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessMatrix,System.Int32)">
            <summary> Column-wise assembly using add</summary>
            <param name="nu">Maximum bandwidth on each column
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.addAssembleVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector,System.Int32)">
            <summary> Assembly using addValue</summary>
            <param name="nu">Maximum number of entries
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setAssembleVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector,System.Int32)">
            <summary> Assembly using setValue</summary>
            <param name="nu">Maximum number of entries
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.addsAssembleVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector,System.Int32)">
            <summary> Assembly using addValues</summary>
            <param name="nu">Maximum number of entries
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Tests.TesterUtilities.setsAssembleVector(MathNet.Numerics.LinearAlgebra.Sparse.IElementalAccessVector,System.Int32)">
            <summary> Assembly using setValues</summary>
            <param name="nu">Maximum number of entries
            </param>
            <returns> Dense representation (not a direct copy)
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays">
            <summary> Miscellaneous array operations.
            Complements the search operations found in java.util.Arrays. This class
            cannot be instantiated.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.#ctor">
            <summary> No need to create an instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.binarySearchGreater(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary> Searches for a key in a sorted array, and returns an index to an
            element which is greater than or equal key.
            </summary>
            <param name="index">Sorted array of integers</param>
            <param name="key">Search for something equal or greater</param>
            <param name="begin">Start posisiton in the index</param>
            <param name="end">One past the end position in the index</param>
            <returns> end if nothing greater or equal was found, else an
            index satisfying the search criteria</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.binarySearchGreater(System.Int32[],System.Int32)">
            <summary> Searches for a key in a sorted array, and returns an index to an
            element which is greater than or equal key.
            </summary>
            <param name="index">Sorted array of integers</param>
            <param name="key">Search for something equal or greater</param>
            <returns> index.length if nothing greater or equal was found, else an
            index satisfying the search criteria</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.binarySearchSmaller(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary> Searches for a key in a sorted array, and returns an index to an
            element which is smaller than or equal key.
            </summary>
            <param name="index">Sorted array of integers</param>
            <param name="key">Search for something equal or greater
            </param>
            <param name="begin">Start posisiton in the index
            </param>
            <param name="end">One past the end position in the index
            </param>
            <returns> begin-1 if nothing smaller or equal was found, else an index
            satisfying the search criteria
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.binarySearchSmaller(System.Int32[],System.Int32)">
            <summary> Searches for a key in a sorted array, and returns an index to an
            element which is smaller than or equal key.
            </summary>
            <param name="index">Sorted array of integers
            </param>
            <param name="key">Search for something equal or greater
            </param>
            <returns> -1 if nothing smaller or equal was found, else an index
            satisfying the search criteria
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.Arrays.binarySearch(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary> Searches for a key in a subset of a sorted array.</summary>
            <param name="index">Sorted array of integers
            </param>
            <param name="key">Key to search for
            </param>
            <param name="begin">Start posisiton in the index
            </param>
            <param name="end">One past the end position in the index
            </param>
            <returns> Integer index to key. -1 if not found
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.DefaultWriteObject(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Object)">
            <summary>
            Writes the serializable fields to the SerializationInfo object, which stores all the data needed to serialize the specified object object.
            </summary>
            <param name="info">SerializationInfo parameter from the GetObjectData method.</param>
            <param name="context">StreamingContext parameter from the GetObjectData method.</param>
            <param name="instance">object to serialize.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.DefaultReadObject(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Object)">
            <summary>
            Reads the serialized fields written by the DefaultWriteObject method.
            </summary>
            <param name="info">SerializationInfo parameter from the special deserialization constructor.</param>
            <param name="context">StreamingContext parameter from the special deserialization constructor</param>
            <param name="instance">object to deserialize.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes an object, or an entire graph of connected objects, and returns the object intance
            </summary>
            <param name="binaryReader">Reader instance used to read the object</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes an object to the specified Stream
            </summary>
            <param name="stream">The target Stream</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.Serialize(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes an object to the specified BinaryWriter
            </summary>
            <param name="binaryWriter">The target BinaryWriter</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.HashSetSupport">
            <summary>
            SupportClass for the HashSet class.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SetSupport">
            <summary>
            Represents a collection ob objects that contains no duplicate elements.
            </summary>	
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SetSupport.Add(System.Object)">
            <summary>
            Adds a new element to the Collection if it is not already present.
            </summary>
            <param name="obj">The object to add to the collection.</param>
            <returns>Returns true if the object was added to the collection, otherwise false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SetSupport.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection to the Set.
            </summary>
            <param name="c">Collection of objects to add.</param>
            <returns>true</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.HashSetSupport.Add(System.Object)">
            <summary>
            Adds a new element to the ArrayList if it is not already present.
            </summary>		
            <param name="obj">Element to insert to the ArrayList.</param>
            <returns>Returns true if the new element was inserted, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.HashSetSupport.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection that are not present to the list.
            </summary>
            <param name="c">Collection where the new elements will be added</param>
            <returns>Returns true if at least one element was added, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.HashSetSupport.Clone">
            <summary>
            Returns a copy of the HashSet instance.
            </summary>		
            <returns>Returns a shallow copy of the current HashSet.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport">
            <summary>
            This class provides functionality not found in .NET collection-related interfaces.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.Add(System.Collections.ICollection,System.Object)">
            <summary>
            Adds a new element to the specified collection.
            </summary>
            <param name="c">Collection where the new element will be added.</param>
            <param name="obj">object to add.</param>
            <returns>true</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.AddAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Adds all of the elements of the "c" collection to the "target" collection.
            </summary>
            <param name="target">Collection where the new elements will be added.</param>
            <param name="c">Collection whose elements will be added.</param>
            <returns>Returns true if at least one element was added, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.Clear(System.Collections.ICollection)">
            <summary>
            Removes all the elements from the collection.
            </summary>
            <param name="c">The collection to remove elements.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Determines whether the collection contains the specified element.
            </summary>
            <param name="c">The collection to check.</param>
            <param name="obj">The object to locate in the collection.</param>
            <returns>true if the element is in the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.ContainsAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether the collection contains all the elements in the specified collection.
            </summary>
            <param name="target">The collection to check.</param>
            <param name="c">Collection whose elements would be checked for containment.</param>
            <returns>true id the target collection contains all the elements of the specified collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.Remove(System.Collections.ICollection,System.Object)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="c">The collection where the element will be removed.</param>
            <param name="obj">The element to remove from the collection.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.RemoveAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Removes all the elements from the specified collection that are contained in the target collection.
            </summary>
            <param name="target">Collection where the elements will be removed.</param>
            <param name="c">Elements to remove from the target collection.</param>
            <returns>true</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.RetainAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Retains the elements in the target collection that are contained in the specified collection
            </summary>
            <param name="target">Collection where the elements will be removed.</param>
            <param name="c">Elements to be retained in the target collection.</param>
            <returns>true</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection)">
            <summary>
            Returns an array containing all the elements of the collection.
            </summary>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection,System.Object[])">
            <summary>
            Obtains an array containing all the elements of the collection.
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ICollectionSupport.ToArrayList(System.Collections.ICollection)">
            <summary>
            Converts an ICollection instance to an ArrayList instance.
            </summary>
            <param name="c">The ICollection instance to be converted.</param>
            <returns>An ArrayList instance in which its elements are the elements of the ICollection instance.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.PropertyChangingEventArgs">
            <summary>
            EventArgs for support to the contrained properties.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.PropertyChangingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new PropertyChangingEventArgs instance.
            </summary>
            <param name="propertyName">Property name that fire the event.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.PropertyChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new PropertyChangingEventArgs instance.
            </summary>
            <param name="propertyName">Property name that fire the event.</param>
            <param name="oldVal">Property value to be replaced.</param>
            <param name="newVal">Property value to be set.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.PropertyChangingEventArgs.OldValue">
            <summary>
            Gets or sets the old value of the event.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.PropertyChangingEventArgs.NewValue">
            <summary>
            Gets or sets the new value of the event.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport">
            <summary>
            Summary description for EqualsSupport.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether two Collections instances are equal.
            </summary>
            <param name="source">The first Collections to compare. </param>
            <param name="target">The second Collections to compare. </param>
            <returns>Return true if the first collection is the same instance as the second collection, otherwise returns false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.ICollection,System.Object)">
            <summary>
            Determines if a Collection is equal to the object.
            </summary>
            <param name="source">The first Collections to compare.</param>
            <param name="target">The object to compare.</param>
            <returns>Return true if the first collection contains the same values of the second object, otherwise returns false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.IDictionaryEnumerator,System.Object)">
            <summary>
            Determines if a IDictionaryEnumerator is equal to the object.
            </summary>
            <param name="source">The first IDictionaryEnumerator to compare.</param>
            <param name="target">The second object to compare.</param>
            <returns>Return true if the first IDictionaryEnumerator contains the same values of the second object, otherwise returns false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.IDictionary,System.Object)">
            <summary>
            Determines if a IDictionary is equal to the object.
            </summary>
            <param name="source">The first IDictionary to compare.</param>
            <param name="target">The second object to compare.</param>
            <returns>Return true if the first IDictionary contains the same values of the second object, otherwise returns false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.IDictionaryEnumerator,System.Collections.IDictionaryEnumerator)">
            <summary>
            Determines whether two IDictionaryEnumerator instances are equals.
            </summary>
            <param name="source">The first IDictionaryEnumerator to compare.</param>
            <param name="target">The second IDictionaryEnumerator to compare.</param>
            <returns>Return true if the first IDictionaryEnumerator contains the same values as the second IDictionaryEnumerator, otherwise return false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.ReverseStack(System.Collections.ICollection)">
            <summary>
            Reverses the Stack Collection received.
            </summary>
            <param name="collection">The collection to reverse.</param>
            <returns>The collection received in reverse order if it was a System.Collections.Stack type, otherwise it does 
            nothing to the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.EqualsSupport.Equals(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Determines whether two IDictionary instances are equal.
            </summary>
            <param name="source">The first Collection to compare.</param>
            <param name="target">The second Collection to compare.</param>
            <returns>Return true if the first collection is the same instance as the second collection, otherwise return false.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.IListSupport">
            <summary>
            Provides functionality for classes that implements the IList interface.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.IListSupport.EnsureCapacity(System.Collections.ArrayList,System.Int32)">
            <summary>
            Ensures the capacity of the list to be greater or equal than the specified.
            </summary>
            <param name="list">The list to be checked.</param>
            <param name="capacity">The expected capacity.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.IListSupport.AddAll(System.Collections.IList,System.Int32,System.Collections.ICollection)">
            <summary>
            Adds all the elements contained into the specified collection, starting at the specified position.
            </summary>
            <param name="index">Position at which to add the first element from the specified collection.</param>
            <param name="list">The list used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.IListSupport.GetEnumerator(System.Collections.IList,System.Int32)">
            <summary>
            Returns an enumerator of the collection starting at the specified position.
            </summary>
            <param name="index">The position to set the iterator.</param>
            <returns>An IEnumerator at the specified position.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport">
            <summary>
            Provides functionality not found in .NET map-related interfaces.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.ContainsValue(System.Collections.IDictionary,System.Object)">
            <summary>
            Determines whether the SortedList contains a specific value.
            </summary>
            <param name="d">The dictionary to check for the value.</param>
            <param name="obj">The object to locate in the SortedList.</param>
            <returns>Returns true if the value is contained in the SortedList, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.ContainsValue(System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            Determines whether the NameValueCollection contains a specific value.
            </summary>
            <param name="d">The dictionary to check for the value.</param>
            <param name="obj">The object to locate in the SortedList.</param>
            <returns>Returns true if the value is contained in the NameValueCollection, false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.PutAll(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Copies all the elements of d to target.
            </summary>
            <param name="target">Collection where d elements will be copied.</param>
            <param name="d">Elements to copy to the target collection.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.HeadMap(System.Collections.SortedList,System.Object)">
            <summary>
            Returns a portion of the list whose keys are less than the limit object parameter.
            </summary>
            <param name="l">The list where the portion will be extracted.</param>
            <param name="limit">The end element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are less than the limit object parameter.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.SubMap(System.Collections.SortedList,System.Object,System.Object)">
            <summary>
            Returns a portion of the list whose keys are greater that the lowerLimit parameter less than the upperLimit parameter.
            </summary>
            <param name="list">The list where the portion will be extracted.</param>
            <param name="lowerLimit">The start element of the portion to extract.</param>
            <param name="upperLimit">The end element of the portion to extract.</param>
            <returns>The portion of the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.MapSupport.TailMap(System.Collections.SortedList,System.Object)">
            <summary>
            Returns a portion of the list whose keys are greater than the limit object parameter.
            </summary>
            <param name="list">The list where the portion will be extracted.</param>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SortedSetSupport">
            <summary>
            SupportClass for the SortedSet interface.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SortedSetSupport.HeadSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are less than the limit object parameter.
            </summary>
            <param name="limit">The end element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are less than the limit object parameter.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SortedSetSupport.SubSet(System.Object,System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater that the lowerLimit parameter less than the upperLimit parameter.
            </summary>
            <param name="upperLimit">The start element of the portion to extract.</param>
            <param name="lowerLimit">The end element of the portion to extract.</param>
            <returns>The portion of the collection.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.SortedSetSupport.TailSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ArraySupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ArraySupport.Equals(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array whith the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ArraySupport.Fill(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Fills the array with an specific value from an specific index to an specific index.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="fromindex">The first index to be filled.</param>
            <param name="toindex">The last index to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Sparse.Utilities.SupportClass.ArraySupport.Fill(System.Array,System.Object)">
            <summary>
            Fills the array with an specific value.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition">
            <summary>Cholesky Decomposition.</summary>
            <remarks>
            For a symmetric, positive definite matrix A, the Cholesky decomposition
            is an lower triangular matrix L so that A = L*L'.
            If the matrix is not symmetric or positive definite, the constructor
            returns a partial decomposition and sets an internal flag that may
            be queried by the <see cref="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.IsSPD"/> property.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.L">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.isspd">
            <summary>Symmetric and positive definite flag.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Cholesky algorithm for symmetric and positive definite matrix.</summary>
            <param name="Arg">Square, symmetric matrix.</param>
            <returns>Structure to access L and isspd flag.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.GetL">
            <summary>Return triangular factor.</summary>
            <returns>L</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">  A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*L'*X = B</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException">Matrix is not symmetric positive definite.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.n">
            <summary>Row and column dimension (square matrix).</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.IsSPD">
            <summary>Is the matrix symmetric and positive definite?</summary>
            <returns><c>true</c> if A is symmetric and positive definite.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition">
            <summary>Eigenvalues and eigenvectors of a real matrix.</summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V.Multiply(D.Multiply(V.Transpose())) and 
            V.Multiply(V.Transpose()) equals the identity matrix.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.cond().
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.n">
            <summary>Row and column dimension (square matrix).</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.issymmetric">
            <summary>Symmetry flag.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.d">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.e">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.V">
            <summary>Array for internal storage of eigenvectors.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.H">
            <summary>Array for internal storage of nonsymmetric Hessenberg form.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.ort">
            <summary>Working storage for nonsymmetric algorithm.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Check for symmetry, then construct the eigenvalue decomposition</summary>
            <remarks>Provides access to D and V</remarks>
            <param name="Arg">Square matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.#ctor(System.Double[],System.Double[])">
            <summary>Constructs the eigenvalue decomposition from a symmetrical, 
            tridiagonal matrix.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.EigenValues">
            <summary>Gets the eigenvalues.</summary>
            <returns>diag(D)</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.RealEigenvalues">
            <summary>Gets the real part of the eigenvalues.</summary>
            <returns>real(diag(D))</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.ImagEigenvalues">
            <summary>Gets the imaginary part of the eigenvalues</summary>
            <returns>imag(diag(D))</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.BlockDiagonal">
            <summary>Gets the block diagonal eigenvalue matrix</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.EigenVectors">
            <summary>Returns the eigenvector matrix</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.LUDecomposition">
            <summary>LU Decomposition.</summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n
            unit lower triangular matrix L, an n-by-n upper triangular matrix U,
            and a permutation vector piv of length m so that A(piv,:) = L*U.
            <c> If m &lt; n, then L is m-by-m and U is m-by-n. </c>
            The LU decompostion with pivoting always exists, even if the matrix is
            singular, so the constructor will never fail.  The primary use of the
            LU decomposition is in the solution of square systems of simultaneous
            linear equations.  This will fail if IsNonSingular() returns false.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.LU">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.pivsign">
            <summary>Pivot sign.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.piv">
            <summary>Internal storage of pivot vector.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>LU Decomposition</summary>
            <param name="A">  Rectangular matrix
            </param>
            <returns>     Structure to access L, U and piv.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.Determinant">
            <summary>Determinant</summary>
            <returns>det(A)</returns>
            <exception cref="T:System.ArgumentException">Matrix must be square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*U*X = B(piv,:)</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException">Matrix is singular.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.IsNonSingular">
            <summary>Indicates whether the matrix is nonsingular.</summary>
            <returns><c>true</c> if U, and hence A, is nonsingular.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.L">
            <summary>Gets lower triangular factor.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.U">
            <summary>Gets upper triangular factor.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.Pivot">
            <summary>Gets pivot permutation vector</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.DoublePivot">
            <summary>Returns pivot permutation vector as a one-dimensional double array.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Maths.Hypot(System.Double,System.Double)">
            <summary>sqrt(a^2 + b^2) without under/overflow.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Matrix">
            <summary>Real matrix.</summary>
            <remarks>
            The class <c>Matrix</c> provides the elementary operations
            on matrices (addition, multiplication, inversion, transposition, ...).
            Helpers to handle sub-matrices are also provided.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Matrix.A">
            <summary>Array for internal storage of elements.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Construct an m-by-n matrix of zeros. </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Construct an m-by-n constant matrix.</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <param name="s">Fill the matrix with this scalar value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>Constructs a matrix from a 2-D array.</summary>
            <param name="A">Two-dimensional array of doubles.</param>
            <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[0:,0:])"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Double[],System.Int32)">
            <summary>Construct a matrix from a one-dimensional packed array</summary>
            <param name="vals">One-dimensional array of doubles, packed by columns (ala Fortran).</param>
            <param name="m">Number of rows.</param>
            <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[0:,0:])">
            <summary>Constructs a matrix from a copy of a 2-D array.</summary>
            <param name="A">Two-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Identity(System.Int32,System.Int32)">
            <summary>Generates identity matrix</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Random(System.Int32,System.Int32)">
            <summary>Generates matrix with random elements</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <returns>An m-by-n matrix with uniformly distributed
            random elements in <c>[0, 1)</c> interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>A(i0:i1,j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32[])">
            <summary>Gets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(r(:),c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Get a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(i0:i1,c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Get a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>A(r(:),j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Set a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <param name="X">A(i0:i1,j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Sets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(r(:),c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Sets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <param name="X">A(r(:),j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Set a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(i0:i1,c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Norm1">
            <summary>One norm</summary>
            <returns>Maximum column sum.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Norm2">
            <summary>Two norm</summary>
            <returns>Maximum singular value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.NormInf">
            <summary>Infinity norm</summary>
            <returns>Maximum row sum.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.NormF">
            <summary>Frobenius norm</summary>
            <returns>Sqrt of sum of squares of all elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Add(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>In place addition of <c>m</c> to this <c>Matrix</c>.</summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>Multiplies in place this <c>Matrix</c> by a scalar.</summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Subtract(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>In place substraction of <c>m</c> to this <c>Matrix</c>.</summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose">
            <summary>In place transposition of this <c>Matrix</c>.</summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose(MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Gets the transposition of the provided <c>Matrix</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.UnaryMinus">
            <summary>In place unary minus of the <c>Matrix</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>In place element-by-element multiplication.</summary>
            <remarks>This instance and <c>m</c> must have the same dimensions.</remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Element-by-element multiplication.</summary>
            <remarks><c>m1</c> and <c>m2</c> must have the same dimensions.</remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>In place element-by-element right division, <c>A ./= B</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Element-by-element right division, <c>C = A./B</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.LUD">
            <summary>LU Decomposition</summary>
            <seealso cref="T:MathNet.Numerics.LinearAlgebra.LUDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.QRD">
            <summary>QR Decomposition</summary>
            <returns>QRDecomposition</returns>
            <seealso cref="T:MathNet.Numerics.LinearAlgebra.QRDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.chol">
            <summary>Cholesky Decomposition</summary>
            <seealso cref="T:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SVD">
            <summary>Singular Value Decomposition</summary>
            <seealso cref="T:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Eigen">
            <summary>Eigenvalue Decomposition</summary>
            <seealso cref="T:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SolveTranspose(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve X*A = B, which is also A'*X' = B'</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Inverse">
            <summary>Matrix inverse or pseudoinverse.</summary>
            <returns> inverse(A) if A is square, pseudoinverse otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Determinant">
            <summary>Matrix determinant</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Rank">
            <summary>Matrix rank</summary>
            <returns>effective numerical rank, obtained from SVD.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Condition">
            <summary>Matrix condition (2 norm)</summary>
            <returns>ratio of largest to smallest singular value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Trace">
            <summary>Matrix trace.</summary>
            <returns>sum of the diagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Addition of matrices</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Subtraction of matrices</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Linear algebraic matrix multiplication.</summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>Implicit convertion to a <c>double[,]</c> array.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double[]">
            <summary>
            Explicit convertion to a <c>double[]</c> array of a single column matrix.
            </summary>
            <param name="m">Exactly one column expected.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CheckMatrixDimensions(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Clone">
            <summary>Returns a deep copy of this instance.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.rowCount">
            <summary>Row dimension.</summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.RowCount"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.columnCount">
            <summary>Column dimension.</summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.ColumnCount"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.RowCount">
            <summary>Gets the number of rows.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.ColumnCount">
            <summary>Gets the number of columns.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.</summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.NamespaceDoc">
            <summary>
            <p>This namespace is a port of the 
            <a href="http://math.nist.gov/javanumerics/jama/">JAMA library</a>.</p>
            
            <p>The <c>MathNet.Numerics.LinearAlgebra</c> provides the fundamental operations 
            of numerical linear algebra.  Various constructors create Matrices from two 
            dimensional arrays of double precision floating point numbers.  Various "gets" 
            and "sets" provide access to submatrices and matrix elements.  Several methods 
            implement basic matrix arithmetic, including matrix addition and
            multiplication, matrix norms, and element-by-element array operations.
            Methods for reading and printing matrices are also included.  All the
            operations in this version of the Matrix Class involve real matrices.
            Complex matrices may be handled in a future version.</p>
            
            <p>Five fundamental matrix decompositions, which consist of pairs or triples
            of matrices, permutation vectors, and the like, produce results in five
            decomposition classes.  These decompositions are accessed by the Matrix
            class to compute solutions of simultaneous linear equations, determinants,
            inverses and other matrix functions.</p>
            
            The five decompositions are:<br/>
            <UL>
            <LI>Cholesky Decomposition of symmetric, positive definite matrices.</LI>
            <LI>LU Decomposition of rectangular matrices.</LI>
            <LI>QR Decomposition of rectangular matrices.</LI>
            <LI>Singular Value Decomposition of rectangular matrices.</LI>
            <LI>Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.</LI>
            </UL>
            
            <p><b>Example of use:</b> Solve a linear system <c>A x = b</c> and compute the residual norm, 
            <c>||b - A x||</c>.</p>
            <code>
            double[,] vals = {{1.,2.,3.},{4.,5.,6.},{7.,8.,10.}};
            Matrix a = new Matrix(vals);
            Matrix b = Matrix.Random(3,1);
            Matrix x = a.Solve(b);
            Matrix r = a * x - b;
            double rnorm = r.NormInf();
            </code>
            
            <p>Author: The MathWorks, Inc. and the National Institute of Standards and Technology (5 August 1998).</p>
            <p>Port: Joannes Vermorel (2004).</p>
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.QRDecomposition">
            <summary>QR Decomposition.</summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the QR decomposition is an m-by-n
            orthogonal matrix Q and an n-by-n upper triangular matrix R so that
            A = Q*R.<br/>
            
            The QR decompostion always exists, even if the matrix does not have
            full rank, so the constructor will never fail.  The primary use of the
            QR decomposition is in the least squares solution of nonsquare systems
            of simultaneous linear equations.  This will fail if <c>IsFullRank()</c>
            returns false.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.QRDecomposition.QR">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.QRDecomposition.Rdiag">
            <summary>Array for internal storage of diagonal of R.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.QRDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>QR Decomposition, computed by Householder reflections.</summary>
            <remarks>Provides access to R, the Householder vectors and computes Q.</remarks>
            <param name="A">Rectangular matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.QRDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Least squares solution of A*X = B</summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException"> Matrix is rank deficient.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.FullRank">
            <summary>Indicates whether the matrix is full rank.</summary>
            <returns><c>true</c> if R, and hence A, has full rank.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.H">
            <summary>Gets the Householder vectors.</summary>
            <returns>Lower trapezoidal matrix whose columns define the reflections.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.R">
            <summary>Gets the upper triangular factor</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.Q">
            <summary>Gets the (economy-sized) orthogonal factor.</summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition">
            <summary>Singular Value Decomposition.</summary>
            <remarks>
            <p>For an m-by-n matrix A with m >= n, the singular value decomposition 
            is an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
            an n-by-n orthogonal matrix V so that A = U*S*V'.</p>
            
            <p>The singular values, sigma[k] = S[k, k], are ordered so that
            sigma[0] >= sigma[1] >= ... >= sigma[n-1].</p>
            
            <p>The singular value decompostion always exists, so the constructor will
            never fail.  The matrix condition number and the effective numerical
            rank can be computed from this decomposition.</p>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.U">
            <summary>Matrices for internal storage of U and V.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.V">
            <summary>Matrices for internal storage of U and V.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.s">
            <summary>Array for internal storage of singular values.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.transpose">
            <summary>Indicates whether all the results provided by the
            method or properties should be transposed.</summary>
            <remarks>
            (vermorel) The initial implementation was assuming that
            m &gt;= n, but in fact, it is easy to handle the case m &lt; n
            by transposing all the results.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Construct the singular value decomposition.</summary>
            <remarks>Provides access to U, S and V.</remarks>
            <param name="Arg">Rectangular matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Norm2">
            <summary>Two norm.</summary>
            <returns>max(S)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Condition">
            <summary>Two norm condition number.</summary>
            <returns>max(S)/min(S)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Rank">
            <summary>Effective numerical matrix rank.</summary>
            <returns>Number of nonnegligible singular values.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.SingularValues">
            <summary>Gets the one-dimensional array of singular values.</summary>
            <returns>diagonal of S.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.S">
            <summary>Get the diagonal matrix of singular values.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.LeftSingularVectors">
            <summary>Gets the left singular vectors (U matrix).</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.RightSingularVectors">
            <summary>Gets the right singular vectors (V matrix).</summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Accumulator">
            <summary>
            The <c>Accumulator</c> provides online algorithms to computes the first
            statistical moments and their derivatives.
            </summary>
            <remarks>
            <p>The <c>Accumulator</c> provides memory efficient online algorithms
            to compute the first statisticals moments (mean, variance) and their
            derivatives (sigma, error estimate).</p>
            <p>The memory required by the accumulator is <c>O(1)</c> independent
            from the distribution size. All methods are executed in a <c>O(1)</c>
            computational time.
            </p>
            <p>The <c>Accumulator</c> is not thread safe.</p>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.sum">
            <summary>
            Sum of the values added to the accumulator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.squaredSum">
            <summary>
            Sum of the square of the values added to the accumulator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.count">
            <summary>
            Number of values added to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor">
            <summary>
            Creates an empty <c>Accumulator</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor(System.Double[])">
            <summary>
            Creates an <c>Accumulator</c> that contains the provided values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor(System.Collections.ICollection)">
            <summary>
            Creates an <c>Accumulator</c> that contains the provided values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Add(System.Double)">
            <summary>
            Adds a real value to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.AddRange(System.Double[])">
            <summary>
            Adds a range of values to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of values to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Clear">
            <summary>
            Clears (re-initialize) the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Remove(System.Double)">
            <summary>
            Removes a value from the accumulator.
            </summary>
            <remarks>
            <p>Caution: the <c>Accumulator</c> does not explicitely records the
            added values. Therefore, no exception will be thrown if an attemp
            is made to remove a value that have not been previously added to
            the accumulator.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.RemoveRange(System.Double[])">
            <summary>
            Removes a range of values from the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes a range of values from the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Count">
            <summary>
            Gets the number of values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.ErrorEstimate">
            <summary>
            Gets the mean error estimate defined as the square root of the ratio of 
            the standard deviation to the number of values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Mean">
            <summary>
            Gets the mean of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Sigma">
            <summary>
            Gets the standard deviation of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Variance">
            <summary>
            Gets the variance of the values added to the accumulator.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.NamespaceDoc">
            <summary>
            The <c>MathNet.Numerics.Statistics</c> namespace provides
            various common statistical tools.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.ComplexFourierTransformation">
            <summary>
            The <c>ComplexFourierTransformation</c> provides algorithms
            for one, two and three dimensional fast fourier transformations
            (FFT) on complex vectors.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.ComplexTransformation">
            <summary>
            <c>ComplexTransformation</c> is a generalization for
            integral transformations on complex numbers.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.ComplexTransformation.viewData">
            <summary>Mapped data source for core transformations.</summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.#ctor(MathNet.Numerics.Complex[])">
            <summary>
            Accepts raw complex data to be mapped to appropriate dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformCore(System.Boolean)">
            <summary>
            The core transformation implementation for one dimension.
            </summary>
            <param name="forward">Indicates the transformation direction.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformForward1D">
            <summary>
            Forward Transformation in one dimension.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformBackward1D">
            <summary>
            Backward Transformation in one dimension.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformForward2D(System.Int32)">
            <summary>
            Forward Transformation in two dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformBackward2D(System.Int32)">
            <summary>
            Backward Transformation in two dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformForward3D(System.Int32,System.Int32)">
            <summary>
            Forward Transformation in three dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.TransformBackward3D(System.Int32,System.Int32)">
            <summary>
            Backward Transformation in three dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexTransformation.SwapViewData(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the mapped data array by indexes.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Transformations.ComplexTransformation.Data">
            <summary>
            Returns the current data vector.
            </summary>
            <remarks>The returned array is not a copy but refers to the internal storage.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.#ctor(MathNet.Numerics.Complex[])">
            <summary>
            Creates a real-value based fast fourier transformation instance
            with the data provided
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformCore(System.Boolean)">
            <summary>
            The core transformation implementation for one dimension.
            </summary>
            <param name="forward">Indicates the transformation direction.</param>
        </member>
        <member name="T:MathNet.Numerics.Transformations.FourierHelper">
            <summary>
            Helper class for fourier transformations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.Pow2(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.Log2(System.Int32)">
            <summary>
            Evaluates the logarithm to base 2 of the provided integer value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.ReverseBits(System.Int32)">
            <summary>
            Permutates <c>numberOfBits</c> in ascending order
            and reverses each element's bits afterwards.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.RealCosineCoefficients(System.Int32,System.Boolean)">
            <summary>
            Evaluates complex rotation coefficients if not already available
            and returns the (real) cosine lookup table.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.ImaginarySineCoefficients(System.Int32,System.Boolean)">
            <summary>
            Evaluates complex rotation coefficients if not already available
            and returns the (imaginary) sine lookup table.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.FourierHelper.BuildCoefficientsForLevels(System.Int32)">
            <summary>
            Evaluates complex rotation coefficients if not already available.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.NamespaceDoc">
            <summary>
            The <c>MathNet.Numerics.Transformations</c> namespace provides
            various numeric integral transformations.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.RealFourierTransformation">
            <summary>
            The <c>RealFourierTransformation</c> provides algorithms
            for one, two and three dimensional fast fourier transformations
            (FFT) on real vectors.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.RealTransformation">
            <summary>
            <c>RealTransformation</c> is a generalization for
            integral transformations on real numbers.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.RealTransformation.viewData">
            <summary>Mapped data source for core transformations.</summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.#ctor(System.Double[])">
            <summary>
            Accepts raw complex data to be mapped to appropriate dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformCore(System.Boolean)">
            <summary>
            The core transformation implementation for one dimension.
            </summary>
            <param name="forward">Indicates the transformation direction.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformForward1D">
            <summary>
            Forward Transformation in one dimension.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformBackward1D">
            <summary>
            Backward Transformation in one dimension.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformForward2D(System.Int32)">
            <summary>
            Forward Transformation in two dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformBackward2D(System.Int32)">
            <summary>
            Backward Transformation in two dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformForward3D(System.Int32,System.Int32)">
            <summary>
            Forward Transformation in three dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.TransformBackward3D(System.Int32,System.Int32)">
            <summary>
            Backward Transformation in three dimensions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealTransformation.SwapViewData(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the mapped data array by indexes.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Transformations.RealTransformation.Data">
            <summary>
            Returns the current data vector.
            </summary>
            <remarks>The returned array is not a copy but refers to the internal storage.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.#ctor(System.Double[])">
            <summary>
            Creates a real-value based fast fourier transformation instance
            with the data provided
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformCore(System.Boolean)">
            <summary>
            The core transformation implementation for one dimension.
            </summary>
            <param name="forward">Indicates the transformation direction.</param>
        </member>
        <member name="T:MathNet.Numerics.Collection">
            <summary>
            The class <c>Collection</c> contains several utilies performing
            some basic collection operations (like union, intersection...).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Collection.#ctor">
            <summary>
            Preventing the instanciation of the <see cref="T:MathNet.Numerics.Collection"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Collection.Concat(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the concatenation from
            <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>The call is performed in <c>O(1)</c> computational time, the
            contatenated collection is not built explicitely.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Inter(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the mathematical intersection
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>
            <p>The call is performed in <c>O(c1.Count+c2.Count)</c> and
            the intersection is built explicitely.</p>
            <p>The resulting collection will not contain several identical elements.</p>
            <p>Example: Inter({1;1;2;3},{0;1;1;3;4}) = {1;3}.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Minus(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the substraction of
            the items of <c>c2</c> to the collection <c>c1</c>. 
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>The call is performed in <c>O(c1.Count+c2.Count)</c></remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Product(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns the cartesian product of the two collections <c>c1</c>
            and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Collection.Union(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the union of the items
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>
            <p>The call is performed in <c>O(c1.Count+c2.Count)</c>
            computational time.</p>
            <p>The resulting collection will not contain several identical elements.</p>
            <p>Example: Union({1;1;3},{0;1;2;3}) = {0;1;2;3}</p>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Collection.ConcatCollection">
            <summary>
            The class <c>ContatCollection</c> is used to perform the 
            mathematical concatenation between two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Concat(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Collection.InterCollection">
            <summary>
            The class <c>InterCollection</c> is used to perform the
            mathematical intersection between two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Inter(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Collection.UnionCollection">
            <summary>
            The class <c>UnionCollection</c> is used to perform the
            mathematical union between two collections.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Collection.MinusCollection">
            <summary>
            The collection <c>MinusCollection</c> is used to perform
            the mathematical substraction of two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Minus(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Complex">
            <summary>Complex numbers class.</summary>
            <remarks>
            <p>The class <c>Complex</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions such 
            as <see cref="M:MathNet.Numerics.Complex.Cos"/>, <see cref="M:MathNet.Numerics.Complex.Acoth"/>, ... 
            are also provided. Note that the <c>Complex</c> structures 
            has two special constant values <see cref="P:MathNet.Numerics.Complex.NaN"/> and 
            <see cref="P:MathNet.Numerics.Complex.Infinity"/>.</p>
            
            <p>In order to avoid possible ambiguities resulting from a 
            <c>Complex(double, double)</c> constructor, the static methods 
            <see cref="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)"/> and <see cref="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)"/>
            are provided instead.</p>
            
            <code>
            Complex x = Complex.FromRealImaginary(1d, 2d);
            Complex y = Complex.FromModulusArgument(1d, Math.Pi);
            Complex z = (x + y) / (x - y);
            </code>
            
            <p>Since there is no canonical order amoung the complex numbers,
            <c>Complex</c> does not implement <c>IComparable</c> but several
            lexicographic <c>IComparer</c> implementations are provided, see 
            <see cref="P:MathNet.Numerics.Complex.RealImaginaryComparer"/>,
            <see cref="P:MathNet.Numerics.Complex.ModulusArgumentComparer"/> and
            <see cref="P:MathNet.Numerics.Complex.ArgumentModulusComparer"/>.</p>
            
            <p>For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a></p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)">
            <summary>Constructs a <c>Complex</c> from its real
            and imaginary parts.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)">
            <summary>Constructs a <c>Complex</c> from its modulus and
            argument.</summary>
            <param name="modulus">Must be non-negative.</param>
            <param name="argument">Real number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(System.Object)">
            <summary>Indicates whether <c>obj</c> is equal to this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(MathNet.Numerics.Complex)">
            <summary>Indicates whether <c>z</c> is equal to this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.GetHashCode">
            <summary>Gets the hashcode of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Inequality test.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryPlus(MathNet.Numerics.Complex)">
            <summary>Unary addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryNegation(MathNet.Numerics.Complex)">
            <summary>Unary minus.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Double)~MathNet.Numerics.Complex">
            <summary>Implicit conversion of a real double to a real <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sin">
            <summary>Trigonometric Sine (Sinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cos">
            <summary>Trigonometric Cosine (Cosinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tan">
            <summary>Trigonometric Tangent (Tangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cot">
            <summary>Trigonometric Cotangent (Cotangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sec">
            <summary>Trigonometric Secant (Sekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Csc">
            <summary>Trigonometric Cosecant (Cosekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asin">
            <summary>Trigonometric Arcus Sine (Arkussinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acos">
            <summary>Trigonometric Arcus Cosine (Arkuscosinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Atan">
            <summary>Trigonometric Arcus Tangent (Arkustangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acot">
            <summary>Trigonometric Arcus Cotangent (Arkuscotangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asec">
            <summary>Trigonometric Arcus Secant (Arkussekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acsc">
            <summary>Trigonometric Arcus Cosecant (Arkuscosekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sinh">
            <summary>Trigonometric Hyperbolic Sine (Sinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cosh">
            <summary>Trigonometric Hyperbolic Cosine (Cosinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tanh">
            <summary>Trigonometric Hyperbolic Tangent (Tangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Coth">
            <summary>Trigonometric Hyperbolic Cotangent (Cotangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sech">
            <summary>Trigonometric Hyperbolic Secant (Secans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Csch">
            <summary>Trigonometric Hyperbolic Cosecant (Cosecans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asinh">
            <summary>Trigonometric Hyperbolic Area Sine (Areasinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acosh">
            <summary>Trigonometric Hyperbolic Area Cosine (Areacosinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Atanh">
            <summary>Trigonometric Hyperbolic Area Tangent (Areatangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acoth">
            <summary>Trigonometric Hyperbolic Area Cotangent (Areacotangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asech">
            <summary>Trigonometric Hyperbolic Area Secant (Areasekans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acsch">
            <summary>Trigonometric Hyperbolic Area Cosecant (Areacosekans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Exp">
            <summary>Exponential of this <c>Complex</c> (exp(x), E^x).</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Ln">
            <summary>Natural Logarithm of this <c>Complex</c> (Base E).</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Pow(MathNet.Numerics.Complex)">
            <summary>Raise this <c>Complex</c> to the given value.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Root(MathNet.Numerics.Complex)">
            <summary>Raise this <c>Complex</c> to the inverse of the given value.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Square">
            <summary>The Square (power 2) of this <c>Complex</c></summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sqrt">
            <summary>The Square Root (power 1/2) of this <c>Complex</c></summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String)">
            <summary>Parse a string into a <c>Complex</c>.</summary>
            <remarks>
            The adopted string representation for the complex numbers is 
            <i>UVW+I*XYZ</i> where <i>UVW</i> and <i>XYZ</i> are <c>double</c> 
            strings. Some alternative representations are <i>UVW+XYZi</i>,
            <i>UVW+iXYZ</i>, <i>UVW</i> and <i>iXYZ</i>. 
            Additionally the string <c>"NaN"</c> is mapped to 
            <c>Complex.NaN</c>, the string <c>"Infinity"</c> to 
            <c>Complex.ComplexInfinity</c>, <c>"PositiveInfinity"</c>
            to <c>Complex.DirectedInfinity(Complex.One)</c>,
            <c>"NegativeInfinity"</c> to <c>Complex.DirectedInfinity(-Complex.One)</c>
            and finally <c>"DirectedInfinity(WVW+I*XYZ)"</c> to <c>Complex.DirectedInfinity(WVW+I*XYZ)</c>.
            <code>
            Complex z = Complex.Parse("12.5+I*7");
            Complex nan = Complex.Parse("NaN");
            Complex infinity = Complex.Parse("Infinity");
            </code>
            This method is symetric to <see cref="M:MathNet.Numerics.Complex.ToString"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString">
            <summary>
            Converts this <c>Complex</c> into a <c>string</c>.
            </summary>
            <remarks>
            <p>This method is symmetric to <see cref="M:MathNet.Numerics.Complex.Parse(System.String)"/>.</p>
            <p>The .Net framework may round-up the <c>double</c> values when
            converting them to string. The method <c>Complex.ToExactString</c>
            guarantied that no approximation will be done while converting
            the <see cref="T:MathNet.Numerics.Complex"/> to a <c>string</c>.</p>
            </remarks>
            <seealso cref="M:MathNet.Numerics.Double.ToExactString(System.Double)"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.RealImaginaryComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(real, imaginary)</c>. 
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusArgumentComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(modulus, argument)</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ArgumentModulusComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(argument, modulus)</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Zero">
            <summary>Represents the zero value. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsZero">
            <summary>Indicates whether the <c>Complex</c> is zero.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.One">
            <summary>Represents the <c>1</c> value. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.I">
            <summary>Represents the imaginary number. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.NaN">
            <summary>Represents a value that is not a number. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsNaN">
            <summary>Indicates whether the provided <c>Complex</c> evaluates to a
            value that is not a number.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Infinity">
            <summary>Represents the infinity value. This field is constant.</summary>
            <remarks>The semantic associated to this value is a <c>Complex</c> of 
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative MathNet.PreciseNumerics and MathNet.Symbolics packages
            instead.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsInfinity">
            <summary>Indicates the provided <c>Complex</c> evaluates to an
            infinite value.</summary>
            <remarks>True if it either evaluates to a complex infinity
            or to a directed infinity.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsReal">
            <summary>Indicates the provided <c>Complex</c> is real.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsImaginary">
            <summary>Indicates the provided <c>Complex</c> is imaginary.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Real">
            <summary>Gets or sets the real part of this <c>Complex</c>.</summary>
            <seealso cref="P:MathNet.Numerics.Complex.Imag"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Imag">
            <summary>Gets or sets the imaginary part of this <c>Complex</c>.</summary>
            <seealso cref="P:MathNet.Numerics.Complex.Real"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Modulus">
            <summary>Gets or sets the modulus of this <c>Complex</c>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if an attemp
            is made to set a negative modulus.</exception>
            <remarks>If this <c>Complex</c> is zero when the modulus is set, the Complex is assumed to be positive real with an argument of zero.</remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusSquared">
            <summary>Gets or sets the squared modulus of this <c>Complex</c>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if an attemp
            is made to set a negative modulus.</exception>
            <remarks>If this <c>Complex</c> is zero when the modulus is set, the Complex is assumed to be positive real with an argument of zero.</remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Argument">
            <summary>Gets or sets the argument of this <c>Complex</c>.</summary>
            <remarks>Argument always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive real with an argument of zero.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.Conjugate">
            <summary>Gets or sets the conjugate of this <c>Complex</c>.</summary>
            <remarks>The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Double">
            <summary>
            The class <c>Double</c> provides various utilities to handle
            <c>double</c> values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <return>A string representation of the double's exact decimal value.</return>
            <remarks>
            <p>The .Net framework often round-up the <c>double</c> value
            when converting them into <c>string</c>. This behavior however
            might be troublesome for application. The method <c>ToExactString</c>
            provides, as the name suggests, an non-rounded string conversion
            of a <c>double</c> value.</p>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Double.ArbitraryDecimal">
            <summary>Private class used for manipulating.</summary>
        </member>
        <member name="F:MathNet.Numerics.Double.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:MathNet.Numerics.Double.ArbitraryDecimal.decimalPoint">
            <summary> How many digits are *after* the decimal point</summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.NamespaceDoc">
            <summary>
            <p><c>MathNet.Numerics</c> aims to provide the mathematical tools
            commonly used for numeric scientific computation.</p>
            
            <p>The current implementation contains
            <ul>
            	<li>A linear algebra package, see 
            	<see cref="N:MathNet.Numerics.LinearAlgebra"/>.</li>
            	<li>Non-uniform random generators, see 
            	<see cref="N:MathNet.Numerics.Generators"/>.</li>
            	<li>Distribution fonctions, see
            	<see cref="N:MathNet.Numerics.Distributions"/>.</li>
            	<li>Statistics tools, see
            	<see cref="N:MathNet.Numerics.Statistics"/>.</li>
            	<li>Fourier transformation, see
            	<see cref="N:MathNet.Numerics.Transformations"/>.</li>
            </ul>
            </p>
            
            <p>Authors: Joannes Vermorel, Christoph Ruegg</p>
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Polynomial">
            <summary>
            Polynomial represents a finite order polynomial
            with positive powers and constant real coefficients.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(System.Int32)">
            <summary>Create a new polynomial by order</summary>
            <param name="order">The highest power. Example: 2*x^3+x-3 has order 3.</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(System.Double[])">
            <summary>Create a new polynomial by coefficients</summary>
            <param name="coefficients">The coefficients vector. The coefficient index denotes the related power (c[0]*z^0+c[1]*z^1+..)</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(MathNet.Numerics.Polynomial)">
            <summary>Create a new polynomial by copy</summary>
            <param name="copy">A polynomial to copy from.</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Division(MathNet.Numerics.Polynomial,System.Double)">
            <exception cref="T:System.DivideByZeroException"/>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Real">
            <summary>Gets the real part of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagX">
            <summary>Gets the imaginary X part (coefficient of complex I) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagY">
            <summary>Gets the imaginary Y part (coefficient of complex J) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagZ">
            <summary>Gets the imaginary Z part (coefficient of complex K) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Norm">
            <summary>Gets the norm n(q) = ||q||^2 of the quaternion q.</summary>
        </member>
        <member name="T:MathNet.Numerics.Rational">
            <summary>
            Rational represents a finite order rational with positive
            powers and constant real coefficients for both numerator and denominator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>Create a new rational by polynomials (directly linked, clone them manually before applying if needed)</summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(System.Int32,System.Int32)">
            <summary>Create a new rational by orders</summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(System.Double[],System.Double[])">
            <summary>Create a new rational by coefficients</summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(MathNet.Numerics.Rational)">
            <summary>Create a new rational by copy</summary>
            <param name="copy">A rational to copy from.</param>
        </member>
        <member name="T:MathNet.Numerics.Trig">
            <summary>
            Static DoublePrecision Trigonometry Helper Class
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToRadiant(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a radiant (2*Pi-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadiantToDegree(System.Double)">
            <summary>
            Converts a radiant (2*Pi-periodic) angle to a degree (360-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.NewgradToRadiant(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a radiant (2*Pi-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadiantToNewgrad(System.Double)">
            <summary>
            Converts a radiant (2*Pi-periodic) angle to a newgrad (400-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToNewgrad(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a newgrad (400-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.NewgradToDegree(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a degree (360-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sin(System.Double)">
            <summary>Trigonometric Sine (Sinus) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cos(System.Double)">
            <summary>Trigonometric Cosine (Cosinus) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tan(System.Double)">
            <summary>Trigonometric Tangent (Tangens) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cot(System.Double)">
            <summary>Trigonometric Cotangent (Cotangens) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sec(System.Double)">
            <summary>Trigonometric Secant (Sekans) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Csc(System.Double)">
            <summary>Trigonometric Cosecant (Cosekans) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asin(System.Double)">
            <summary>Trigonometric Arcus Sine (Arkussinus) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acos(System.Double)">
            <summary>Trigonometric Arcus Cosine (Arkuscosinus) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Atan(System.Double)">
            <summary>Trigonometric Arcus Tangent (Arkustangens) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.ArcusTangentFromRational(System.Double,System.Double)">
            <summary>The principal argument (in radians) of the complex number x+I*y</summary>
            <param name="nominator">y</param>
            <param name="denominator">x</param>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acot(System.Double)">
            <summary>Trigonometric Arcus Cotangent (Arkuscotangens) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asec(System.Double)">
            <summary>Trigonometric Arcus Secant (Arkussekans) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acsc(System.Double)">
            <summary>Trigonometric Arcus Cosecant (Arkuscosekans) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sinh(System.Double)">
            <summary>Trigonometric Hyperbolic Sine (Sinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosh(System.Double)">
            <summary>Trigonometric Hyperbolic Cosine (Cosinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tanh(System.Double)">
            <summary>Trigonometric Hyperbolic Tangent (Tangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Coth(System.Double)">
            <summary>Trigonometric Hyperbolic Cotangent (Cotangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sech(System.Double)">
            <summary>Trigonometric Hyperbolic Secant (Sekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Csch(System.Double)">
            <summary>Trigonometric Hyperbolic Cosecant (Cosekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asinh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Sine (Areasinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acosh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cosine (Areacosinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Atanh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Tangent (Areatangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acoth(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cotangent (Areacotangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asech(System.Double)">
            <summary>Trigonometric Hyperbolic Area Secant (Areasekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acsch(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cosecant (Areacosekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Hypot(System.Double,System.Double)">
            <summary> Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> 
            without underflow/overlow.</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of Gamma for a real value > 0
            </summary>
            <param name="xx">A real value for Gamma calculation</param>
            <returns>A value ln|Gamma(xx))| for xx > 0</returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Factorial(System.Int32)">
            <summary>
            Returns a factorial of an integer number (n!)
            </summary>
            <param name="n">The value to be factorialized</param>
            <returns>The double precision result</returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns a binomial coefficient of n and k as a double precision number
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.FactorialLn(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Beta(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
    </members>
</doc>
